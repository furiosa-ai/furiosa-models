{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Furiosa Models furiosa-models is an open model zoo project for FuriosaAI NPU. It provides a set of public pre-trained, pre-quantized models for learning and demo purposes or for developing your applications. furisoa-models also includes pre-packaged post/processing utilities, compiler configurations optimized for FuriosaAI NPU. However, all models are standard ONNX or tflite models, and they can run even on CPU and GPU as well. https://github.com/furiosa-ai/furiosa-models Online Documentation If you are new, you can start from Getting Started . You can also find the latest online documents, including programming guide, API reference, examples from the followings. Furiosa Models - Documentation Model object and its Examples Model List Furiosa SDK - Tutorial and Code Examples Model List The table summarizes all models available in furiosa-models . If you visit each model link, you can find details about loading a model, their input and output tensors, and pre/post processings, and examples. Model Task Size Accuracy ResNet50 Image Classification 25M 76.002% SSDMobileNet Object Detection 7.2M mAP 0.228 SSDResNet34 Object Detection 20M mAP 0.220 YOLOv5M Object Detection 21M mAP 0.280 YOLOv5L Object Detection 46M mAP 0.295 See Also Furiosa Models - Documentation Furiosa Models - Github Furiosa SDK Documentation","title":"Overview"},{"location":"#furiosa-models","text":"furiosa-models is an open model zoo project for FuriosaAI NPU. It provides a set of public pre-trained, pre-quantized models for learning and demo purposes or for developing your applications. furisoa-models also includes pre-packaged post/processing utilities, compiler configurations optimized for FuriosaAI NPU. However, all models are standard ONNX or tflite models, and they can run even on CPU and GPU as well. https://github.com/furiosa-ai/furiosa-models","title":"Furiosa Models"},{"location":"#online-documentation","text":"If you are new, you can start from Getting Started . You can also find the latest online documents, including programming guide, API reference, examples from the followings. Furiosa Models - Documentation Model object and its Examples Model List Furiosa SDK - Tutorial and Code Examples","title":"Online Documentation"},{"location":"#model-list","text":"The table summarizes all models available in furiosa-models . If you visit each model link, you can find details about loading a model, their input and output tensors, and pre/post processings, and examples. Model Task Size Accuracy ResNet50 Image Classification 25M 76.002% SSDMobileNet Object Detection 7.2M mAP 0.228 SSDResNet34 Object Detection 20M mAP 0.220 YOLOv5M Object Detection 21M mAP 0.280 YOLOv5L Object Detection 46M mAP 0.295","title":"Model List"},{"location":"#see-also","text":"Furiosa Models - Documentation Furiosa Models - Github Furiosa SDK Documentation","title":"See Also"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on keep a changelog . [Unreleased] [0.0.3] Added Changed Furiosa Model now uses blocking API by default instead of non-blocking API [0.0.2] [0.0.1]","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#003","text":"","title":"[0.0.3]"},{"location":"changelog/#added","text":"","title":"Added"},{"location":"changelog/#changed","text":"Furiosa Model now uses blocking API by default instead of non-blocking API","title":"Changed"},{"location":"changelog/#002","text":"","title":"[0.0.2]"},{"location":"changelog/#001","text":"","title":"[0.0.1]"},{"location":"getting_started/","text":"Getting Started This documentation explains how to install furiosa-models, how to use available models in furisoa-models, and how to explore the documents. Prerequisites furiosa-models can be installed on various Linux distributions, but it has been tested on the followings: CentOS 7 or higher Debian buster or higher Ubuntu 18.04 or higher The following packages should be installed, but the followings are installed by default in most systems. So, only when you have any dependency issue, you need to install the following packages: libstdc++6 libgomp Installing You can quickly install Furiosa Models by using pip as following: pip install 'furiosa-models' Or you can build from the source code as following: git clone https://github.com/furiosa-ai/furiosa-models pip install . Quick example and Guides You can simply load a model and run through furiosa-sdk as following: from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) This example 1) fetches the SSDMobileNet model, 2) create a session , which is the main class of Furiosa Runtime which actually loads an ONNX/tflite model to NPU and run inferences, and 3) run an inference with pre/post processings. A Model instance is a Python object, including model artifacts and metadata. You can learn more about Model object at Model object . Each mode has its own pre/post processing steps. To learn about them, please refer to Pre/Post processing . Also, you can find all available models at Available Models . Each model page includes the model information, input and output tensors, and pre/post processings, and API reference. If you want to learn more about furiosa.runtime.session in Furiosa Runtime, please refer to Furiosa SDK - Tutorial and Code Examples .","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"This documentation explains how to install furiosa-models, how to use available models in furisoa-models, and how to explore the documents.","title":"Getting Started"},{"location":"getting_started/#prerequisites","text":"furiosa-models can be installed on various Linux distributions, but it has been tested on the followings: CentOS 7 or higher Debian buster or higher Ubuntu 18.04 or higher The following packages should be installed, but the followings are installed by default in most systems. So, only when you have any dependency issue, you need to install the following packages: libstdc++6 libgomp","title":"Prerequisites"},{"location":"getting_started/#installing","text":"You can quickly install Furiosa Models by using pip as following: pip install 'furiosa-models' Or you can build from the source code as following: git clone https://github.com/furiosa-ai/furiosa-models pip install .","title":"Installing"},{"location":"getting_started/#quick-example-and-guides","text":"You can simply load a model and run through furiosa-sdk as following: from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) This example 1) fetches the SSDMobileNet model, 2) create a session , which is the main class of Furiosa Runtime which actually loads an ONNX/tflite model to NPU and run inferences, and 3) run an inference with pre/post processings. A Model instance is a Python object, including model artifacts and metadata. You can learn more about Model object at Model object . Each mode has its own pre/post processing steps. To learn about them, please refer to Pre/Post processing . Also, you can find all available models at Available Models . Each model page includes the model information, input and output tensors, and pre/post processings, and API reference. If you want to learn more about furiosa.runtime.session in Furiosa Runtime, please refer to Furiosa SDK - Tutorial and Code Examples .","title":"Quick example and Guides"},{"location":"model_object/","text":"Model object An Model object represents a neural network model in furiosa-model . This document explains what Model object is, how you can access model artifacts and metadata, and usages. Loading a model To load a pre-trained neural-network model, you need to call as the following. Since the sizes of model images vary from tens to hundreds megabytes, fetching a pre-trained model takes some time (usually few seconds). So, we provide two versions of APIs, blocking API and non-blocking API. Non-blocking API will be useful if your application uses asynchronous executors. Blocking API Non-blocking API from furiosa.models.vision import ResNet50 from furiosa.registry import Model model : Model = ResNet50 . load () import asyncio from furiosa.models.vision import ResNet50 from furiosa.registry import Model model : Model = asyncio . run ( ResNet50 . load_async ()) Accessing artifacts and metadata A model object includes model artifacts, such as ONNX, tflite, DFG, and ENF. DFG and ENF are binary program formats generated by FuriosaAI Compiler . In addition, a model object has various metadata. The followings are all attributes belong to a single model object. furiosa.registry.Model Represent the artifacts and metadata of a neural network model Attributes: Name Type Description name str a name of this model format Format the binary format of model source (e.g., ONNX, tflite) source Optional [ bytes ] a source binary in ONNX or tflite. It can be used for model compilation. dfg Optional [ bytes ] an intermediate IR of furiosa-sdk. Native post processor implementation uses dfg binary. Users don't need to use this directly. enf Optional [ bytes ] the compiled binary which can directly run on furiosa runtime. version Optional [ str ] model version inputs Optional [ List [ ModelTensor ]] Optional[List[ModelTensor]]: data type and shape of input tensors outputs Optional [ List [ ModelTensor ]] Optional[List[ModelTensor]]: data type and shape of output tensors compiler_config Optional [ Dict ] a pre-defined compiler option Creating a session (with a compilation) To load a model to FuriosaAI NPU, you need to create a session instance with a specific model artifact through Furiosa SDK. As we mentioned above, even a single model instance has multiple model artifacts from a ONNX model to a pre-compiled binary called ENF. By default, the session API uses the ENF (pre-compiled program binary) of the Model instance to reduce the model compilation time. However, when you want to compile a model with a custom compiler configuration, you need to compile from a ONNX model. The following codes show two examples: Using ENF binary Using ONNX model from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model . source , batch_size = 2 ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) If you want to learn more about various options and features of Session API, please refer to Furiosa SDK - Tutorial and Code Examples . See Also Furiosa SDK Documentation","title":"Model object"},{"location":"model_object/#model-object","text":"An Model object represents a neural network model in furiosa-model . This document explains what Model object is, how you can access model artifacts and metadata, and usages.","title":"Model object"},{"location":"model_object/#loading-a-model","text":"To load a pre-trained neural-network model, you need to call as the following. Since the sizes of model images vary from tens to hundreds megabytes, fetching a pre-trained model takes some time (usually few seconds). So, we provide two versions of APIs, blocking API and non-blocking API. Non-blocking API will be useful if your application uses asynchronous executors. Blocking API Non-blocking API from furiosa.models.vision import ResNet50 from furiosa.registry import Model model : Model = ResNet50 . load () import asyncio from furiosa.models.vision import ResNet50 from furiosa.registry import Model model : Model = asyncio . run ( ResNet50 . load_async ())","title":"Loading a model"},{"location":"model_object/#accessing-artifacts-and-metadata","text":"A model object includes model artifacts, such as ONNX, tflite, DFG, and ENF. DFG and ENF are binary program formats generated by FuriosaAI Compiler . In addition, a model object has various metadata. The followings are all attributes belong to a single model object.","title":"Accessing artifacts and metadata"},{"location":"model_object/#furiosaregistrymodel","text":"Represent the artifacts and metadata of a neural network model Attributes: Name Type Description name str a name of this model format Format the binary format of model source (e.g., ONNX, tflite) source Optional [ bytes ] a source binary in ONNX or tflite. It can be used for model compilation. dfg Optional [ bytes ] an intermediate IR of furiosa-sdk. Native post processor implementation uses dfg binary. Users don't need to use this directly. enf Optional [ bytes ] the compiled binary which can directly run on furiosa runtime. version Optional [ str ] model version inputs Optional [ List [ ModelTensor ]] Optional[List[ModelTensor]]: data type and shape of input tensors outputs Optional [ List [ ModelTensor ]] Optional[List[ModelTensor]]: data type and shape of output tensors compiler_config Optional [ Dict ] a pre-defined compiler option","title":"furiosa.registry.Model"},{"location":"model_object/#creating-a-session-with-a-compilation","text":"To load a model to FuriosaAI NPU, you need to create a session instance with a specific model artifact through Furiosa SDK. As we mentioned above, even a single model instance has multiple model artifacts from a ONNX model to a pre-compiled binary called ENF. By default, the session API uses the ENF (pre-compiled program binary) of the Model instance to reduce the model compilation time. However, when you want to compile a model with a custom compiler configuration, you need to compile from a ONNX model. The following codes show two examples: Using ENF binary Using ONNX model from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model . source , batch_size = 2 ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) If you want to learn more about various options and features of Session API, please refer to Furiosa SDK - Tutorial and Code Examples .","title":"Creating a session (with a compilation)"},{"location":"model_object/#see-also","text":"Furiosa SDK Documentation","title":"See Also"},{"location":"native_postprocessor/","text":"Some models include the native post-processing implementations, optimized for FuriosaAI Warboy and Intel/AMD CPUs. Basically, furiosa-models includes pre/post-processing implementation in Python for each model. They are reference implementations and can work with CPU and other accelerators like GPU. The native post processor is implemented in Rust and C++, and works with only FuriosaAI NPU. The implementation is designed to leverage FuriosaAI NPU's characteristics even for post-processing and maximize the latency and throughput by using the characteristics of modern CPU architecture, such as CPU cache, SIMD instructions and CPU pipelining. Table 1. Models that support native-postprocessors and their benchmark Model Latency (Python) Latency (Native) ResNet50 SSDMobileNet SSDResNet34 Usage To use native post processor, please pass use_native_post=True when a model is initialized. After then, you need to initialize NativePostProcessor . To evaluate the postprocessing results, please call NativePostProcessor.eval() . The following is an example to use native post processor for SSDMobileNet . from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ])","title":"Native postprocessor"},{"location":"native_postprocessor/#usage","text":"To use native post processor, please pass use_native_post=True when a model is initialized. After then, you need to initialize NativePostProcessor . To evaluate the postprocessing results, please call NativePostProcessor.eval() . The following is an example to use native post processor for SSDMobileNet . from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ])","title":"Usage"},{"location":"models/resnet50_v1.5/","text":"ResNet50 v1.5 ResNet50 v1.5 backbone model trained on ImageNet (224x224). This model has been used since MLCommons v0.5. Overall Framework: PyTorch Model format: ONNX Model task: Image classification Source: This model is originated from ResNet50 v1.5 in ONNX available at MLCommons - Supported Models . Usages Default Native Postprocessor from furiosa.models.vision import ResNet50 , resnet50 from furiosa.runtime import session model = ResNet50 . load () with session . create ( model ) as sess : image = resnet50 . preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () resnet50 . postprocess ( output ) from furiosa.models.vision import ResNet50 from furiosa.models.vision.resnet50 import NativePostProcessor , preprocess from furiosa.runtime import session model = ResNet50 . load () postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image = preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () postprocessor . eval ( output ) Inputs of Model The input is a 3-channel image of 224x224 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 224, 224] Memory Format: NCHW, where: N - batch size C - number of channels H - image height W - image width NPU Optimal Batch Size: <= 8 Output of Model The output is a numpy.float32 tensor with the shape ( [1,] ), including a class id. postprocess() can transform the class id to a single label. Pre/Post processing furiosa.models.vision.resnet50 module provides a set of utilities to convert images to input tensors and the model outputs to labels. furiosa.models.vision.resnet50.preprocess Preprocess an input image to an input tensor of ResNet50. This function can take a standard image file (e.g., jpg, gif, png) and return a numpy array. Parameters: Name Type Description Default image Union [ str , np . ndarray ] A path of an image or an image loaded as numpy from cv2.imread() required Source code in furiosa/models/vision/resnet50/__init__.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def preprocess ( image : Union [ str , np . ndarray ]) -> np . array : \"\"\"Preprocess an input image to an input tensor of ResNet50. This function can take a standard image file (e.g., jpg, gif, png) and return a numpy array. Args: image (Union[str, np.ndarray]): A path of an image or an image loaded as numpy from `cv2.imread()` \"\"\" # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/main.py#L37-L39 # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/dataset.py#L168-L184 if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) image = resize_with_aspect_ratio ( image , 224 , 224 , percent = 87.5 , interpolation = cv2 . INTER_AREA ) image = center_crop ( image , 224 , 224 ) image = np . asarray ( image , dtype = np . float32 ) # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/dataset.py#L178 image -= np . array ([ 123.68 , 116.78 , 103.94 ], dtype = np . float32 ) image = image . transpose ([ 2 , 0 , 1 ]) return image [ np . newaxis , ... ] furiosa.models.vision.resnet50.postprocess Convert the outputs of a model to a label string, such as car and cat. Parameters: Name Type Description Default model_outputs Sequence [ numpy . ndarray ] the outputs of the model required Source code in furiosa/models/vision/resnet50/__init__.py 76 77 78 79 80 81 82 def postprocess ( model_outputs : Sequence [ numpy . ndarray ]) -> str : \"\"\"Convert the outputs of a model to a label string, such as car and cat. Arguments: model_outputs (Sequence[numpy.ndarray]): the outputs of the model \"\"\" return CLASSES [ int ( model_outputs [ 0 ]) - 1 ] furiosa.models.vision.resnet50.NativePostProcess Native postprocessing implementation optimized for NPU This class provides another version of the postprocessing implementation which is highly optimized for NPU. The implementation leverages the NPU IO architecture and runtime. To use this implementation, when this model is loaded, the parameter use_native_post=True should be passed to load() or load_aync() . Then, NativePostProcess object should be created with the model object. eval() method should be called to postprocess. Examples from furiosa.models.vision import ResNet50 from furiosa.models.vision.resnet50 import NativePostProcessor , preprocess from furiosa.runtime import session model = ResNet50 . load () postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image = preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () postprocessor . eval ( output )","title":"ResNet50 v1.5"},{"location":"models/resnet50_v1.5/#resnet50-v15","text":"ResNet50 v1.5 backbone model trained on ImageNet (224x224). This model has been used since MLCommons v0.5.","title":"ResNet50 v1.5"},{"location":"models/resnet50_v1.5/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Image classification Source: This model is originated from ResNet50 v1.5 in ONNX available at MLCommons - Supported Models .","title":"Overall"},{"location":"models/resnet50_v1.5/#usages","text":"Default Native Postprocessor from furiosa.models.vision import ResNet50 , resnet50 from furiosa.runtime import session model = ResNet50 . load () with session . create ( model ) as sess : image = resnet50 . preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () resnet50 . postprocess ( output ) from furiosa.models.vision import ResNet50 from furiosa.models.vision.resnet50 import NativePostProcessor , preprocess from furiosa.runtime import session model = ResNet50 . load () postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image = preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () postprocessor . eval ( output )","title":"Usages"},{"location":"models/resnet50_v1.5/#inputs-of-model","text":"The input is a 3-channel image of 224x224 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 224, 224] Memory Format: NCHW, where: N - batch size C - number of channels H - image height W - image width NPU Optimal Batch Size: <= 8","title":"Inputs of Model"},{"location":"models/resnet50_v1.5/#output-of-model","text":"The output is a numpy.float32 tensor with the shape ( [1,] ), including a class id. postprocess() can transform the class id to a single label.","title":"Output of Model"},{"location":"models/resnet50_v1.5/#prepost-processing","text":"furiosa.models.vision.resnet50 module provides a set of utilities to convert images to input tensors and the model outputs to labels.","title":"Pre/Post processing"},{"location":"models/resnet50_v1.5/#furiosamodelsvisionresnet50preprocess","text":"Preprocess an input image to an input tensor of ResNet50. This function can take a standard image file (e.g., jpg, gif, png) and return a numpy array. Parameters: Name Type Description Default image Union [ str , np . ndarray ] A path of an image or an image loaded as numpy from cv2.imread() required Source code in furiosa/models/vision/resnet50/__init__.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def preprocess ( image : Union [ str , np . ndarray ]) -> np . array : \"\"\"Preprocess an input image to an input tensor of ResNet50. This function can take a standard image file (e.g., jpg, gif, png) and return a numpy array. Args: image (Union[str, np.ndarray]): A path of an image or an image loaded as numpy from `cv2.imread()` \"\"\" # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/main.py#L37-L39 # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/dataset.py#L168-L184 if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) image = resize_with_aspect_ratio ( image , 224 , 224 , percent = 87.5 , interpolation = cv2 . INTER_AREA ) image = center_crop ( image , 224 , 224 ) image = np . asarray ( image , dtype = np . float32 ) # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/dataset.py#L178 image -= np . array ([ 123.68 , 116.78 , 103.94 ], dtype = np . float32 ) image = image . transpose ([ 2 , 0 , 1 ]) return image [ np . newaxis , ... ]","title":"furiosa.models.vision.resnet50.preprocess"},{"location":"models/resnet50_v1.5/#furiosamodelsvisionresnet50postprocess","text":"Convert the outputs of a model to a label string, such as car and cat. Parameters: Name Type Description Default model_outputs Sequence [ numpy . ndarray ] the outputs of the model required Source code in furiosa/models/vision/resnet50/__init__.py 76 77 78 79 80 81 82 def postprocess ( model_outputs : Sequence [ numpy . ndarray ]) -> str : \"\"\"Convert the outputs of a model to a label string, such as car and cat. Arguments: model_outputs (Sequence[numpy.ndarray]): the outputs of the model \"\"\" return CLASSES [ int ( model_outputs [ 0 ]) - 1 ]","title":"furiosa.models.vision.resnet50.postprocess"},{"location":"models/resnet50_v1.5/#furiosamodelsvisionresnet50nativepostprocess","text":"Native postprocessing implementation optimized for NPU This class provides another version of the postprocessing implementation which is highly optimized for NPU. The implementation leverages the NPU IO architecture and runtime. To use this implementation, when this model is loaded, the parameter use_native_post=True should be passed to load() or load_aync() . Then, NativePostProcess object should be created with the model object. eval() method should be called to postprocess. Examples from furiosa.models.vision import ResNet50 from furiosa.models.vision.resnet50 import NativePostProcessor , preprocess from furiosa.runtime import session model = ResNet50 . load () postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image = preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () postprocessor . eval ( output )","title":"furiosa.models.vision.resnet50.NativePostProcess"},{"location":"models/ssd_mobilenet/","text":"SSD MobileNet v1 SSD MobileNet v1 backbone model trained on COCO (300x300). This model has been used since MLCommons v0.5. Overall Framework: PyTorch Model format: ONNX Model task: Object detection Source: This model is originated from SSD MobileNet v1 in ONNX available at MLCommons - Supported Models . Usages Default Native Postprocessor from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ]) Inputs of Model The input is a 3-channel image of 300x300 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 300, 300] Memory Format: NCHW, where: N - batch size C - number of channels H - image height W - image width Optimal Batch Size: <= 8 Outputs of Model The outputs are 12 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 273, 19, 19) float32 NCHW 1 (1, 12, 19, 19) float32 NCHW 2 (1, 546, 10, 10) float32 NCHW 3 (1, 24, 10, 10) float32 NCHW 4 (1, 546, 5, 5) float32 NCHW 5 (1, 24, 5, 5) float32 NCHW 6 (1, 546, 3, 3) float32 NCHW 7 (1, 24, 3, 3) float32 NCHW 8 (1, 546, 2, 2) float32 NCHW 9 (1, 24, 2, 2) float32 NCHW 10 (1, 546, 1, 1) float32 NCHW 11 (1, 24, 1, 1) float32 NCHW Pre/Post processing furiosa.models.vision.ssd_mobilenet module provides a set of utilities to convert images to input tensors and the model outputs to labels. furiosa.models.vision.ssd_mobilenet.preprocess Preprocess input images to a batch of input tensors. When the image file paths are passed, the image files should be standard image format, such as jpg, gif, png. Parameters: Name Type Description Default images Sequence [ Union [ str , np . ndarray ]] A list of paths of image files or a stacked image loaded as numpy through cv2.imread() required Returns: Type Description Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]] 3-channel images of 300x300 in NCHW format. Please find the details at 'Inputs of Model' section. Source code in furiosa/models/vision/ssd_mobilenet/__init__.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def preprocess ( images : Sequence [ Union [ str , np . ndarray ]] ) -> Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]]: \"\"\"Preprocess input images to a batch of input tensors. When the image file paths are passed, the image files should be standard image format, such as jpg, gif, png. Args: images (Sequence[Union[str, np.ndarray]]): A list of paths of image files or a stacked image loaded as numpy through `cv2.imread()` Returns: 3-channel images of 300x300 in NCHW format. Please find the details at 'Inputs of Model' section. \"\"\" \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L49-L51 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/dataset.py#L242-L249 batch_image = [] batch_preproc_param = [] for image in images : if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = np . array ( image , dtype = np . float32 ) if len ( image . shape ) < 3 or image . shape [ 2 ] != 3 : image = cv2 . cvtColor ( image , cv2 . COLOR_GRAY2RGB ) else : image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) width = image . shape [ 1 ] height = image . shape [ 0 ] image = cv2 . resize ( image , ( 300 , 300 ), interpolation = cv2 . INTER_LINEAR ) image -= 127.5 image /= 127.5 image = image . transpose ([ 2 , 0 , 1 ]) batch_image . append ( image ) batch_preproc_param . append ({ \"width\" : width , \"height\" : height }) return np . stack ( batch_image , axis = 0 ), batch_preproc_param furiosa.models.vision.ssd_mobilenet.postprocess Convert the outputs of this model to a list of bounding boxes, scores and labels Parameters: Name Type Description Default model_outputs Sequence [ numpy . ndarray ] the outputs of the model required context Sequence [ Dict [ str , Any ]] context coming from preprocess() required Returns: Type Description List [ List [ ObjectDetectionResult ]] Detected Bounding Box and its score and label represented as ObjectDetectionResult . To learn more about ObjectDetectionResult , 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult Source code in furiosa/models/vision/postprocess.py 31 32 33 34 35 36 37 38 39 @dataclass class LtrbBoundingBox : left : float top : float right : float bottom : float def __iter__ ( self ) -> List [ float ]: return iter ([ self . left , self . top , self . right , self . bottom ]) Source code in furiosa/models/vision/postprocess.py 88 89 90 91 92 93 @dataclass class ObjectDetectionResult : boundingbox : LtrbBoundingBox score : float label : str index : int Source code in furiosa/models/vision/ssd_mobilenet/__init__.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 def postprocess ( model_outputs : Sequence [ numpy . ndarray ], context : Sequence [ Dict [ str , Any ]], confidence_threshold : float = 0.3 , iou_threshold : float = 0.6 , ) -> List [ List [ ObjectDetectionResult ]]: \"\"\"Convert the outputs of this model to a list of bounding boxes, scores and labels Arguments: model_outputs (Sequence[numpy.ndarray]): the outputs of the model context (Sequence[Dict[str, Any]]): context coming from `preprocess()` Returns: Detected Bounding Box and its score and label represented as `ObjectDetectionResult`. To learn more about `ObjectDetectionResult`, 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult: ::: furiosa.models.vision.postprocess.LtrbBoundingBox options: show_root_heading: false show_source: true ::: furiosa.models.vision.postprocess.ObjectDetectionResult options: show_root_heading: false show_source: true \"\"\" assert ( len ( model_outputs ) == NUM_OUTPUTS ), f \"the number of model outputs must be { NUM_OUTPUTS } , but { len ( model_outputs ) } \" batch_size = model_outputs [ 0 ] . shape [ 0 ] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L94-L97 class_logits = [ output . transpose (( 0 , 2 , 3 , 1 )) . reshape (( batch_size , - 1 , NUM_CLASSES )) for output in model_outputs [ 0 :: 2 ] ] box_regression = [ output . transpose (( 0 , 2 , 3 , 1 )) . reshape (( batch_size , - 1 , 4 )) for output in model_outputs [ 1 :: 2 ] ] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L144-L166 class_logits = np . concatenate ( class_logits , axis = 1 ) # type: ignore[assignment] box_regression = np . concatenate ( box_regression , axis = 1 ) # type: ignore[assignment] batch_scores = sigmoid ( class_logits ) # type: ignore[arg-type] batch_boxes = _decode_boxes ( box_regression ) # type: ignore[arg-type] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L178-L185 batch_results = [] for scores , boxes , preproc_params in zip ( batch_scores , batch_boxes , context ): # loop mini-batch width , height = preproc_params [ \"width\" ], preproc_params [ \"height\" ] boxes , labels , scores = _filter_results ( scores , boxes , confidence_threshold = confidence_threshold , iou_threshold = iou_threshold , ) cal_boxes = calibration_ltrbbox ( boxes , width , height ) predicted_result = [] for b , l , s in zip ( cal_boxes , labels , scores ): bb_list = b . tolist () predicted_result . append ( ObjectDetectionResult ( index = l , label = CLASSES [ l ], score = s , boundingbox = LtrbBoundingBox ( left = bb_list [ 0 ], top = bb_list [ 1 ], right = bb_list [ 2 ], bottom = bb_list [ 3 ] ), ) ) batch_results . append ( predicted_result ) return batch_results furiosa.models.vision.ssd_mobilenet.NativePostProcess Native postprocessing implementation optimized for NPU This class provides another version of the postprocessing implementation which is highly optimized for NPU. The implementation leverages the NPU IO architecture and runtime. To use this implementation, when this model is loaded, the parameter use_native_post=True should be passed to load() or load_aync() . Then, NativePostProcess object should be created with the model object. eval() method should be called to postprocess. Examples from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ])","title":"SSD MobileNet v1"},{"location":"models/ssd_mobilenet/#ssd-mobilenet-v1","text":"SSD MobileNet v1 backbone model trained on COCO (300x300). This model has been used since MLCommons v0.5.","title":"SSD MobileNet v1"},{"location":"models/ssd_mobilenet/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Object detection Source: This model is originated from SSD MobileNet v1 in ONNX available at MLCommons - Supported Models .","title":"Overall"},{"location":"models/ssd_mobilenet/#usages","text":"Default Native Postprocessor from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ])","title":"Usages"},{"location":"models/ssd_mobilenet/#inputs-of-model","text":"The input is a 3-channel image of 300x300 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 300, 300] Memory Format: NCHW, where: N - batch size C - number of channels H - image height W - image width Optimal Batch Size: <= 8","title":"Inputs of Model"},{"location":"models/ssd_mobilenet/#outputs-of-model","text":"The outputs are 12 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 273, 19, 19) float32 NCHW 1 (1, 12, 19, 19) float32 NCHW 2 (1, 546, 10, 10) float32 NCHW 3 (1, 24, 10, 10) float32 NCHW 4 (1, 546, 5, 5) float32 NCHW 5 (1, 24, 5, 5) float32 NCHW 6 (1, 546, 3, 3) float32 NCHW 7 (1, 24, 3, 3) float32 NCHW 8 (1, 546, 2, 2) float32 NCHW 9 (1, 24, 2, 2) float32 NCHW 10 (1, 546, 1, 1) float32 NCHW 11 (1, 24, 1, 1) float32 NCHW","title":"Outputs of Model"},{"location":"models/ssd_mobilenet/#prepost-processing","text":"furiosa.models.vision.ssd_mobilenet module provides a set of utilities to convert images to input tensors and the model outputs to labels.","title":"Pre/Post processing"},{"location":"models/ssd_mobilenet/#furiosamodelsvisionssd_mobilenetpreprocess","text":"Preprocess input images to a batch of input tensors. When the image file paths are passed, the image files should be standard image format, such as jpg, gif, png. Parameters: Name Type Description Default images Sequence [ Union [ str , np . ndarray ]] A list of paths of image files or a stacked image loaded as numpy through cv2.imread() required Returns: Type Description Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]] 3-channel images of 300x300 in NCHW format. Please find the details at 'Inputs of Model' section. Source code in furiosa/models/vision/ssd_mobilenet/__init__.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def preprocess ( images : Sequence [ Union [ str , np . ndarray ]] ) -> Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]]: \"\"\"Preprocess input images to a batch of input tensors. When the image file paths are passed, the image files should be standard image format, such as jpg, gif, png. Args: images (Sequence[Union[str, np.ndarray]]): A list of paths of image files or a stacked image loaded as numpy through `cv2.imread()` Returns: 3-channel images of 300x300 in NCHW format. Please find the details at 'Inputs of Model' section. \"\"\" \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L49-L51 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/dataset.py#L242-L249 batch_image = [] batch_preproc_param = [] for image in images : if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = np . array ( image , dtype = np . float32 ) if len ( image . shape ) < 3 or image . shape [ 2 ] != 3 : image = cv2 . cvtColor ( image , cv2 . COLOR_GRAY2RGB ) else : image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) width = image . shape [ 1 ] height = image . shape [ 0 ] image = cv2 . resize ( image , ( 300 , 300 ), interpolation = cv2 . INTER_LINEAR ) image -= 127.5 image /= 127.5 image = image . transpose ([ 2 , 0 , 1 ]) batch_image . append ( image ) batch_preproc_param . append ({ \"width\" : width , \"height\" : height }) return np . stack ( batch_image , axis = 0 ), batch_preproc_param","title":"furiosa.models.vision.ssd_mobilenet.preprocess"},{"location":"models/ssd_mobilenet/#furiosamodelsvisionssd_mobilenetpostprocess","text":"Convert the outputs of this model to a list of bounding boxes, scores and labels Parameters: Name Type Description Default model_outputs Sequence [ numpy . ndarray ] the outputs of the model required context Sequence [ Dict [ str , Any ]] context coming from preprocess() required Returns: Type Description List [ List [ ObjectDetectionResult ]] Detected Bounding Box and its score and label represented as ObjectDetectionResult . To learn more about ObjectDetectionResult , 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult Source code in furiosa/models/vision/postprocess.py 31 32 33 34 35 36 37 38 39 @dataclass class LtrbBoundingBox : left : float top : float right : float bottom : float def __iter__ ( self ) -> List [ float ]: return iter ([ self . left , self . top , self . right , self . bottom ]) Source code in furiosa/models/vision/postprocess.py 88 89 90 91 92 93 @dataclass class ObjectDetectionResult : boundingbox : LtrbBoundingBox score : float label : str index : int Source code in furiosa/models/vision/ssd_mobilenet/__init__.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 def postprocess ( model_outputs : Sequence [ numpy . ndarray ], context : Sequence [ Dict [ str , Any ]], confidence_threshold : float = 0.3 , iou_threshold : float = 0.6 , ) -> List [ List [ ObjectDetectionResult ]]: \"\"\"Convert the outputs of this model to a list of bounding boxes, scores and labels Arguments: model_outputs (Sequence[numpy.ndarray]): the outputs of the model context (Sequence[Dict[str, Any]]): context coming from `preprocess()` Returns: Detected Bounding Box and its score and label represented as `ObjectDetectionResult`. To learn more about `ObjectDetectionResult`, 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult: ::: furiosa.models.vision.postprocess.LtrbBoundingBox options: show_root_heading: false show_source: true ::: furiosa.models.vision.postprocess.ObjectDetectionResult options: show_root_heading: false show_source: true \"\"\" assert ( len ( model_outputs ) == NUM_OUTPUTS ), f \"the number of model outputs must be { NUM_OUTPUTS } , but { len ( model_outputs ) } \" batch_size = model_outputs [ 0 ] . shape [ 0 ] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L94-L97 class_logits = [ output . transpose (( 0 , 2 , 3 , 1 )) . reshape (( batch_size , - 1 , NUM_CLASSES )) for output in model_outputs [ 0 :: 2 ] ] box_regression = [ output . transpose (( 0 , 2 , 3 , 1 )) . reshape (( batch_size , - 1 , 4 )) for output in model_outputs [ 1 :: 2 ] ] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L144-L166 class_logits = np . concatenate ( class_logits , axis = 1 ) # type: ignore[assignment] box_regression = np . concatenate ( box_regression , axis = 1 ) # type: ignore[assignment] batch_scores = sigmoid ( class_logits ) # type: ignore[arg-type] batch_boxes = _decode_boxes ( box_regression ) # type: ignore[arg-type] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L178-L185 batch_results = [] for scores , boxes , preproc_params in zip ( batch_scores , batch_boxes , context ): # loop mini-batch width , height = preproc_params [ \"width\" ], preproc_params [ \"height\" ] boxes , labels , scores = _filter_results ( scores , boxes , confidence_threshold = confidence_threshold , iou_threshold = iou_threshold , ) cal_boxes = calibration_ltrbbox ( boxes , width , height ) predicted_result = [] for b , l , s in zip ( cal_boxes , labels , scores ): bb_list = b . tolist () predicted_result . append ( ObjectDetectionResult ( index = l , label = CLASSES [ l ], score = s , boundingbox = LtrbBoundingBox ( left = bb_list [ 0 ], top = bb_list [ 1 ], right = bb_list [ 2 ], bottom = bb_list [ 3 ] ), ) ) batch_results . append ( predicted_result ) return batch_results","title":"furiosa.models.vision.ssd_mobilenet.postprocess"},{"location":"models/ssd_mobilenet/#furiosamodelsvisionssd_mobilenetnativepostprocess","text":"Native postprocessing implementation optimized for NPU This class provides another version of the postprocessing implementation which is highly optimized for NPU. The implementation leverages the NPU IO architecture and runtime. To use this implementation, when this model is loaded, the parameter use_native_post=True should be passed to load() or load_aync() . Then, NativePostProcess object should be created with the model object. eval() method should be called to postprocess. Examples from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ])","title":"furiosa.models.vision.ssd_mobilenet.NativePostProcess"},{"location":"models/ssd_resnet34/","text":"SSD ResNet34 SSD ResNet34 backbone model trained on COCO (1200x1200). This model has been used since MLCommons v0.5. Overall Framework: PyTorch Model format: ONNX Model task: Object detection Source: This model is originated from SSD ResNet34 in ONNX available at MLCommons - Supported Models . Usage Usages Default Native Postprocessor from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import postprocess , preprocess from furiosa.runtime import session model = SSDResNet34 . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDResNet34 . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context ) Model inputs The input is a 3-channel image of 300x300 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 1200, 1200] Memory Format: NCHW, where N - batch size C - number of channels H - image height W - image width Optimal Batch Size: 1 Outputs The outputs are 12 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 324, 50, 50) float32 NCHW 1 (1, 486, 25, 25) float32 NCHW 2 (1, 486, 13, 13) float32 NCHW 3 (1, 486, 7, 7) float32 NCHW 4 (1, 324, 3, 3) float32 NCHW 5 (1, 324, 3, 3) float32 NCHW 6 (1, 16, 50, 50) float32 NCHW 7 (1, 24, 25, 25) float32 NCHW 8 (1, 24, 13, 13) float32 NCHW 9 (1, 24, 7, 7) float32 NCHW 10 (1, 16, 3, 3) float32 NCHW 11 (1, 16, 3, 3) float32 NCHW Pre/Post processing furiosa.models.vision.ssd_resnet34 module provides a set of utilities to convert images to input tensors and the model outputs to labels. furiosa.models.vision.ssd_resnet34.preprocess Preprocess input images to a batch of input tensors. When the image file paths are passed, the image files should be standard image format, such as jpg, gif, png. Parameters: Name Type Description Default images Sequence [ Union [ str , np . ndarray ]] A list of paths of image files or a stacked image loaded as numpy through cv2.imread() required Returns: Type Description Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]] 3-channel images of 1200x1200 in NCHW format. Please find the details at 'Inputs of Model' section. Source code in furiosa/models/vision/ssd_resnet34/__init__.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def preprocess ( images : List [ Union [ str , np . ndarray ]]) -> Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]]: \"\"\"Preprocess input images to a batch of input tensors. When the image file paths are passed, the image files should be standard image format, such as jpg, gif, png. Args: images (Sequence[Union[str, np.ndarray]]): A list of paths of image files or a stacked image loaded as numpy through `cv2.imread()` Returns: 3-channel images of 1200x1200 in NCHW format. Please find the details at 'Inputs of Model' section. \"\"\" \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L141 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L61-L63 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/dataset.py#L252-L263 batch_image = [] batch_preproc_param = [] for image in images : if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = np . array ( image , dtype = np . float32 ) if len ( image . shape ) < 3 or image . shape [ 2 ] != 3 : image = cv2 . cvtColor ( image , cv2 . COLOR_GRAY2RGB ) else : image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) width = image . shape [ 1 ] height = image . shape [ 0 ] image = cv2 . resize ( image , ( 1200 , 1200 ), interpolation = cv2 . INTER_LINEAR ) mean = np . array ([ 0.485 , 0.456 , 0.406 ], dtype = np . float32 ) std = np . array ([ 0.229 , 0.224 , 0.225 ], dtype = np . float32 ) image = image / 255.0 - mean image = image / std # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L143 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/coco.py#L40 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/coco.py#L91 image = image . transpose ([ 2 , 0 , 1 ]) batch_image . append ( image ) batch_preproc_param . append ({ \"width\" : width , \"height\" : height }) return np . stack ( batch_image , axis = 0 ), batch_preproc_param furiosa.models.vision.ssd_resnet34.postprocess Convert the outputs of this model to a list of bounding boxes, scores and labels Parameters: Name Type Description Default model_outputs Sequence [ numpy . ndarray ] the outputs of the model required context Sequence [ Dict [ str , Any ]] context coming from preprocess() required Returns: Type Description List [ List [ ObjectDetectionResult ]] Detected Bounding Box and its score and label represented as ObjectDetectionResult . To learn more about ObjectDetectionResult , 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult Source code in furiosa/models/vision/postprocess.py 31 32 33 34 35 36 37 38 39 @dataclass class LtrbBoundingBox : left : float top : float right : float bottom : float def __iter__ ( self ) -> List [ float ]: return iter ([ self . left , self . top , self . right , self . bottom ]) Source code in furiosa/models/vision/postprocess.py 88 89 90 91 92 93 @dataclass class ObjectDetectionResult : boundingbox : LtrbBoundingBox score : float label : str index : int Source code in furiosa/models/vision/ssd_resnet34/__init__.py 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 def postprocess ( model_outputs : Sequence [ np . ndarray ], batch_preproc_params : Sequence [ Dict [ str , Any ]], confidence_threshold = 0.05 , ) -> List [ List [ ObjectDetectionResult ]]: \"\"\"Convert the outputs of this model to a list of bounding boxes, scores and labels Arguments: model_outputs (Sequence[numpy.ndarray]): the outputs of the model context (Sequence[Dict[str, Any]]): context coming from `preprocess()` Returns: Detected Bounding Box and its score and label represented as `ObjectDetectionResult`. To learn more about `ObjectDetectionResult`, 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult: ::: furiosa.models.vision.postprocess.LtrbBoundingBox options: show_root_heading: false show_source: true ::: furiosa.models.vision.postprocess.ObjectDetectionResult options: show_root_heading: false show_source: true \"\"\" if len ( model_outputs ) != NUM_OUTPUTS : raise Exception ( f \"output size must be { NUM_OUTPUTS } , but { len ( model_outputs ) } \" ) classes , locations = model_outputs [: 6 ], model_outputs [ 6 :] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L317-L329 classes = [ np . reshape ( cls , ( cls . shape [ 0 ], 81 , - 1 )) for cls in classes ] locations = [ np . reshape ( loc , ( loc . shape [ 0 ], 4 , - 1 )) for loc in locations ] classes = np . concatenate ( classes , axis = 2 ) locations = np . concatenate ( locations , axis = 2 ) # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L251-L253 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L350 # len(det_boxes: List[np.array]) = N batch det_boxes , det_labels , det_scores = Encoder ( dboxes_R34_coco (( 1200 , 1200 ), ( 3 , 3 , 2 , 2 , 2 , 2 )) ) . decode_batch ( torch . from_numpy ( locations ), torch . from_numpy ( classes ), 0.50 , 200 ) # Pick the best boxes # https://pytorch.org/hub/nvidia_deeplearningexamples_ssd/ # sometimes there are many boxes with localizaition and class probability distrituion. batch_results = [] for boxes , labels , scores , preproc_params in zip ( det_boxes , det_labels , det_scores , batch_preproc_params ): width , height = preproc_params [ 'width' ], preproc_params [ 'height' ] boxes , labels , scores = _pick_best ( detections = ( boxes , labels , scores ), confidence_threshold = confidence_threshold , ) cal_boxes = calibration_ltrbbox ( boxes , width , height ) predicted_result = [] for b , l , s in zip ( cal_boxes , labels , scores ): bb_list = b . tolist () predicted_result . append ( ObjectDetectionResult ( index = int ( l ), label = CLASSES [ l ], score = s , boundingbox = LtrbBoundingBox ( left = bb_list [ 0 ], top = bb_list [ 1 ], right = bb_list [ 2 ], bottom = bb_list [ 3 ] ), ) ) batch_results . append ( predicted_result ) return batch_results furiosa.models.vision.ssd_resnet34.NativePostProcess Native postprocessing implementation optimized for NPU This class provides another version of the postprocessing implementation which is highly optimized for NPU. The implementation leverages the NPU IO architecture and runtime. To use this implementation, when this model is loaded, the parameter use_native_post=True should be passed to load() or load_aync() . Then, NativePostProcess object should be created with the model object. eval() method should be called to postprocess. Examples from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDResNet34 . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context )","title":"SSD ResNet34"},{"location":"models/ssd_resnet34/#ssd-resnet34","text":"SSD ResNet34 backbone model trained on COCO (1200x1200). This model has been used since MLCommons v0.5.","title":"SSD ResNet34"},{"location":"models/ssd_resnet34/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Object detection Source: This model is originated from SSD ResNet34 in ONNX available at MLCommons - Supported Models .","title":"Overall"},{"location":"models/ssd_resnet34/#usage","text":"","title":"Usage"},{"location":"models/ssd_resnet34/#usages","text":"Default Native Postprocessor from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import postprocess , preprocess from furiosa.runtime import session model = SSDResNet34 . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDResNet34 . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context )","title":"Usages"},{"location":"models/ssd_resnet34/#model-inputs","text":"The input is a 3-channel image of 300x300 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 1200, 1200] Memory Format: NCHW, where N - batch size C - number of channels H - image height W - image width Optimal Batch Size: 1","title":"Model inputs"},{"location":"models/ssd_resnet34/#outputs","text":"The outputs are 12 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 324, 50, 50) float32 NCHW 1 (1, 486, 25, 25) float32 NCHW 2 (1, 486, 13, 13) float32 NCHW 3 (1, 486, 7, 7) float32 NCHW 4 (1, 324, 3, 3) float32 NCHW 5 (1, 324, 3, 3) float32 NCHW 6 (1, 16, 50, 50) float32 NCHW 7 (1, 24, 25, 25) float32 NCHW 8 (1, 24, 13, 13) float32 NCHW 9 (1, 24, 7, 7) float32 NCHW 10 (1, 16, 3, 3) float32 NCHW 11 (1, 16, 3, 3) float32 NCHW","title":"Outputs"},{"location":"models/ssd_resnet34/#prepost-processing","text":"furiosa.models.vision.ssd_resnet34 module provides a set of utilities to convert images to input tensors and the model outputs to labels.","title":"Pre/Post processing"},{"location":"models/ssd_resnet34/#furiosamodelsvisionssd_resnet34preprocess","text":"Preprocess input images to a batch of input tensors. When the image file paths are passed, the image files should be standard image format, such as jpg, gif, png. Parameters: Name Type Description Default images Sequence [ Union [ str , np . ndarray ]] A list of paths of image files or a stacked image loaded as numpy through cv2.imread() required Returns: Type Description Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]] 3-channel images of 1200x1200 in NCHW format. Please find the details at 'Inputs of Model' section. Source code in furiosa/models/vision/ssd_resnet34/__init__.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def preprocess ( images : List [ Union [ str , np . ndarray ]]) -> Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]]: \"\"\"Preprocess input images to a batch of input tensors. When the image file paths are passed, the image files should be standard image format, such as jpg, gif, png. Args: images (Sequence[Union[str, np.ndarray]]): A list of paths of image files or a stacked image loaded as numpy through `cv2.imread()` Returns: 3-channel images of 1200x1200 in NCHW format. Please find the details at 'Inputs of Model' section. \"\"\" \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L141 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L61-L63 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/dataset.py#L252-L263 batch_image = [] batch_preproc_param = [] for image in images : if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = np . array ( image , dtype = np . float32 ) if len ( image . shape ) < 3 or image . shape [ 2 ] != 3 : image = cv2 . cvtColor ( image , cv2 . COLOR_GRAY2RGB ) else : image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) width = image . shape [ 1 ] height = image . shape [ 0 ] image = cv2 . resize ( image , ( 1200 , 1200 ), interpolation = cv2 . INTER_LINEAR ) mean = np . array ([ 0.485 , 0.456 , 0.406 ], dtype = np . float32 ) std = np . array ([ 0.229 , 0.224 , 0.225 ], dtype = np . float32 ) image = image / 255.0 - mean image = image / std # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L143 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/coco.py#L40 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/coco.py#L91 image = image . transpose ([ 2 , 0 , 1 ]) batch_image . append ( image ) batch_preproc_param . append ({ \"width\" : width , \"height\" : height }) return np . stack ( batch_image , axis = 0 ), batch_preproc_param","title":"furiosa.models.vision.ssd_resnet34.preprocess"},{"location":"models/ssd_resnet34/#furiosamodelsvisionssd_resnet34postprocess","text":"Convert the outputs of this model to a list of bounding boxes, scores and labels Parameters: Name Type Description Default model_outputs Sequence [ numpy . ndarray ] the outputs of the model required context Sequence [ Dict [ str , Any ]] context coming from preprocess() required Returns: Type Description List [ List [ ObjectDetectionResult ]] Detected Bounding Box and its score and label represented as ObjectDetectionResult . To learn more about ObjectDetectionResult , 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult Source code in furiosa/models/vision/postprocess.py 31 32 33 34 35 36 37 38 39 @dataclass class LtrbBoundingBox : left : float top : float right : float bottom : float def __iter__ ( self ) -> List [ float ]: return iter ([ self . left , self . top , self . right , self . bottom ]) Source code in furiosa/models/vision/postprocess.py 88 89 90 91 92 93 @dataclass class ObjectDetectionResult : boundingbox : LtrbBoundingBox score : float label : str index : int Source code in furiosa/models/vision/ssd_resnet34/__init__.py 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 def postprocess ( model_outputs : Sequence [ np . ndarray ], batch_preproc_params : Sequence [ Dict [ str , Any ]], confidence_threshold = 0.05 , ) -> List [ List [ ObjectDetectionResult ]]: \"\"\"Convert the outputs of this model to a list of bounding boxes, scores and labels Arguments: model_outputs (Sequence[numpy.ndarray]): the outputs of the model context (Sequence[Dict[str, Any]]): context coming from `preprocess()` Returns: Detected Bounding Box and its score and label represented as `ObjectDetectionResult`. To learn more about `ObjectDetectionResult`, 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult: ::: furiosa.models.vision.postprocess.LtrbBoundingBox options: show_root_heading: false show_source: true ::: furiosa.models.vision.postprocess.ObjectDetectionResult options: show_root_heading: false show_source: true \"\"\" if len ( model_outputs ) != NUM_OUTPUTS : raise Exception ( f \"output size must be { NUM_OUTPUTS } , but { len ( model_outputs ) } \" ) classes , locations = model_outputs [: 6 ], model_outputs [ 6 :] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L317-L329 classes = [ np . reshape ( cls , ( cls . shape [ 0 ], 81 , - 1 )) for cls in classes ] locations = [ np . reshape ( loc , ( loc . shape [ 0 ], 4 , - 1 )) for loc in locations ] classes = np . concatenate ( classes , axis = 2 ) locations = np . concatenate ( locations , axis = 2 ) # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L251-L253 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L350 # len(det_boxes: List[np.array]) = N batch det_boxes , det_labels , det_scores = Encoder ( dboxes_R34_coco (( 1200 , 1200 ), ( 3 , 3 , 2 , 2 , 2 , 2 )) ) . decode_batch ( torch . from_numpy ( locations ), torch . from_numpy ( classes ), 0.50 , 200 ) # Pick the best boxes # https://pytorch.org/hub/nvidia_deeplearningexamples_ssd/ # sometimes there are many boxes with localizaition and class probability distrituion. batch_results = [] for boxes , labels , scores , preproc_params in zip ( det_boxes , det_labels , det_scores , batch_preproc_params ): width , height = preproc_params [ 'width' ], preproc_params [ 'height' ] boxes , labels , scores = _pick_best ( detections = ( boxes , labels , scores ), confidence_threshold = confidence_threshold , ) cal_boxes = calibration_ltrbbox ( boxes , width , height ) predicted_result = [] for b , l , s in zip ( cal_boxes , labels , scores ): bb_list = b . tolist () predicted_result . append ( ObjectDetectionResult ( index = int ( l ), label = CLASSES [ l ], score = s , boundingbox = LtrbBoundingBox ( left = bb_list [ 0 ], top = bb_list [ 1 ], right = bb_list [ 2 ], bottom = bb_list [ 3 ] ), ) ) batch_results . append ( predicted_result ) return batch_results","title":"furiosa.models.vision.ssd_resnet34.postprocess"},{"location":"models/ssd_resnet34/#furiosamodelsvisionssd_resnet34nativepostprocess","text":"Native postprocessing implementation optimized for NPU This class provides another version of the postprocessing implementation which is highly optimized for NPU. The implementation leverages the NPU IO architecture and runtime. To use this implementation, when this model is loaded, the parameter use_native_post=True should be passed to load() or load_aync() . Then, NativePostProcess object should be created with the model object. eval() method should be called to postprocess. Examples from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDResNet34 . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context )","title":"furiosa.models.vision.ssd_resnet34.NativePostProcess"},{"location":"models/yolov5l/","text":"YOLOv5L YOLOv5 is the one of the most popular object detection models developed by Ultralytics . You can find more details at https://github.com/ultralytics/yolov5. Overall Framework: PyTorch Model format: ONNX Model task: Object Detection Source: This model is originated from https://github.com/ultralytics/yolov5 Usage import cv2 from furiosa.models.vision import YOLOv5l from furiosa.models.vision.yolov5.medium import postprocess , preprocess from furiosa.runtime import session model = YOLOv5l . load () with session . create ( model ) as sess : image = cv2 . imread ( \"tests/assets/yolov5-test.jpg\" ) input , context = preprocess ([ image ], color_format = \"bgr\" ) output = sess . run ( input ) . numpy () postprocess ( output , context = context ) Model inputs The input is a 3-channel image of 640, 640 (height, width). Data Type: numpy.uint8 Tensor Shape: [1, 640, 640, 3] Memory Format: NCHW, where N - batch size C - number of channels H - image height W - image width Optimal Batch Size: 1 Outputs The outputs are 3 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 45, 80, 80) float32 NCHW 1 (1, 45, 40, 40) float32 NCHW 2 (1, 45, 20, 20) float32 NCHW Pre/Post processing furiosa.models.vision.yolov5.large module provides a set of utilities to convert images to input tensors and the model outputs to object detection results. furiosa.models.vision.yolov5.large.preprocess Preprocess a batch of images in numpy Parameters: Name Type Description Default images Sequence [ np . ndarray ] Color images have (NCHW: Batch, Channel, Height, Width) dimensions. required input_color_format str 'rgb' (Red, Green, Blue) or 'bgr' (Blue, Green, Red). required Returns: Type Description Tuple [ np . ndarray , List [ Dict [ str , Any ]]] a pre-processed image, scales and padded sizes(width,height) per images. The first element is a preprocessing image, and a second element is a dictionary object to be used for postprocess. 'scale' key of the returned dict has a rescaled ratio per width(=target/width) and height(=target/height), and the 'pad' key has padded width and height pixels. Specially, the last dictionary element of returing tuple will be passed to postprocessing as a parameter to calculate predicted coordinates on normalized coordinates back to an input image coordinator. Source code in furiosa/models/vision/yolov5/large.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def preprocess ( images : Sequence [ np . ndarray ], input_color_format : str ) -> Tuple [ np . ndarray , List [ Dict [ str , Any ]]]: \"\"\"Preprocess a batch of images in numpy Args: images (Sequence[np.ndarray]): Color images have (NCHW: Batch, Channel, Height, Width) dimensions. input_color_format (str): 'rgb' (Red, Green, Blue) or 'bgr' (Blue, Green, Red). Returns: a pre-processed image, scales and padded sizes(width,height) per images. The first element is a preprocessing image, and a second element is a dictionary object to be used for postprocess. 'scale' key of the returned dict has a rescaled ratio per width(=target/width) and height(=target/height), and the 'pad' key has padded width and height pixels. Specially, the last dictionary element of returing tuple will be passed to postprocessing as a parameter to calculate predicted coordinates on normalized coordinates back to an input image coordinator. \"\"\" return _yolov5 . preprocess ( images , input_color_format ) furiosa.models.vision.yolov5.large.postprocess Convert the outputs of this model to a list of bounding boxes, scores and labels Parameters: Name Type Description Default model_outputs Sequence [ np . array ] P3/8, P4/16, P5/32 features from yolov5l model. required context Dict [ str , Any ] A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. required conf_threshold float Confidence score threshold. The default to 0.25 required iou_thres float IoU threshold value for the NMS processing. The default to 0.45. 0.45 Returns: Type Description List [ List [ ObjectDetectionResult ]] Detected Bounding Box and its score and label represented as ObjectDetectionResult . To learn more about ObjectDetectionResult , 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult Source code in furiosa/models/vision/postprocess.py 31 32 33 34 35 36 37 38 39 @dataclass class LtrbBoundingBox : left : float top : float right : float bottom : float def __iter__ ( self ) -> List [ float ]: return iter ([ self . left , self . top , self . right , self . bottom ]) Source code in furiosa/models/vision/postprocess.py 88 89 90 91 92 93 @dataclass class ObjectDetectionResult : boundingbox : LtrbBoundingBox score : float label : str index : int Source code in furiosa/models/vision/yolov5/large.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def postprocess ( model_outputs : Sequence [ np . array ], context : Sequence [ Dict [ str , Any ]], conf_thres : float = 0.25 , iou_thres : float = 0.45 , ) -> List [ List [ ObjectDetectionResult ]]: \"\"\"Convert the outputs of this model to a list of bounding boxes, scores and labels Args: model_outputs (Sequence[np.array]): P3/8, P4/16, P5/32 features from yolov5l model. context (Dict[str, Any]): A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. conf_threshold (float, optional): Confidence score threshold. The default to 0.25 iou_thres (float, optional): IoU threshold value for the NMS processing. The default to 0.45. Returns: Detected Bounding Box and its score and label represented as `ObjectDetectionResult`. To learn more about `ObjectDetectionResult`, 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult: ::: furiosa.models.vision.postprocess.LtrbBoundingBox options: show_root_heading: false show_source: true ::: furiosa.models.vision.postprocess.ObjectDetectionResult options: show_root_heading: false show_source: true \"\"\" return _yolov5 . postprocess ( model_outputs , _BOX_DECODER , _get_anchor_per_layer_count (), _CLASS_NAMES , context , conf_thres = conf_thres , iou_thres = iou_thres , )","title":"YOLOv5L"},{"location":"models/yolov5l/#yolov5l","text":"YOLOv5 is the one of the most popular object detection models developed by Ultralytics . You can find more details at https://github.com/ultralytics/yolov5.","title":"YOLOv5L"},{"location":"models/yolov5l/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Object Detection Source: This model is originated from https://github.com/ultralytics/yolov5 Usage import cv2 from furiosa.models.vision import YOLOv5l from furiosa.models.vision.yolov5.medium import postprocess , preprocess from furiosa.runtime import session model = YOLOv5l . load () with session . create ( model ) as sess : image = cv2 . imread ( \"tests/assets/yolov5-test.jpg\" ) input , context = preprocess ([ image ], color_format = \"bgr\" ) output = sess . run ( input ) . numpy () postprocess ( output , context = context )","title":"Overall"},{"location":"models/yolov5l/#model-inputs","text":"The input is a 3-channel image of 640, 640 (height, width). Data Type: numpy.uint8 Tensor Shape: [1, 640, 640, 3] Memory Format: NCHW, where N - batch size C - number of channels H - image height W - image width Optimal Batch Size: 1","title":"Model inputs"},{"location":"models/yolov5l/#outputs","text":"The outputs are 3 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 45, 80, 80) float32 NCHW 1 (1, 45, 40, 40) float32 NCHW 2 (1, 45, 20, 20) float32 NCHW","title":"Outputs"},{"location":"models/yolov5l/#prepost-processing","text":"furiosa.models.vision.yolov5.large module provides a set of utilities to convert images to input tensors and the model outputs to object detection results.","title":"Pre/Post processing"},{"location":"models/yolov5l/#furiosamodelsvisionyolov5largepreprocess","text":"Preprocess a batch of images in numpy Parameters: Name Type Description Default images Sequence [ np . ndarray ] Color images have (NCHW: Batch, Channel, Height, Width) dimensions. required input_color_format str 'rgb' (Red, Green, Blue) or 'bgr' (Blue, Green, Red). required Returns: Type Description Tuple [ np . ndarray , List [ Dict [ str , Any ]]] a pre-processed image, scales and padded sizes(width,height) per images. The first element is a preprocessing image, and a second element is a dictionary object to be used for postprocess. 'scale' key of the returned dict has a rescaled ratio per width(=target/width) and height(=target/height), and the 'pad' key has padded width and height pixels. Specially, the last dictionary element of returing tuple will be passed to postprocessing as a parameter to calculate predicted coordinates on normalized coordinates back to an input image coordinator. Source code in furiosa/models/vision/yolov5/large.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def preprocess ( images : Sequence [ np . ndarray ], input_color_format : str ) -> Tuple [ np . ndarray , List [ Dict [ str , Any ]]]: \"\"\"Preprocess a batch of images in numpy Args: images (Sequence[np.ndarray]): Color images have (NCHW: Batch, Channel, Height, Width) dimensions. input_color_format (str): 'rgb' (Red, Green, Blue) or 'bgr' (Blue, Green, Red). Returns: a pre-processed image, scales and padded sizes(width,height) per images. The first element is a preprocessing image, and a second element is a dictionary object to be used for postprocess. 'scale' key of the returned dict has a rescaled ratio per width(=target/width) and height(=target/height), and the 'pad' key has padded width and height pixels. Specially, the last dictionary element of returing tuple will be passed to postprocessing as a parameter to calculate predicted coordinates on normalized coordinates back to an input image coordinator. \"\"\" return _yolov5 . preprocess ( images , input_color_format )","title":"furiosa.models.vision.yolov5.large.preprocess"},{"location":"models/yolov5l/#furiosamodelsvisionyolov5largepostprocess","text":"Convert the outputs of this model to a list of bounding boxes, scores and labels Parameters: Name Type Description Default model_outputs Sequence [ np . array ] P3/8, P4/16, P5/32 features from yolov5l model. required context Dict [ str , Any ] A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. required conf_threshold float Confidence score threshold. The default to 0.25 required iou_thres float IoU threshold value for the NMS processing. The default to 0.45. 0.45 Returns: Type Description List [ List [ ObjectDetectionResult ]] Detected Bounding Box and its score and label represented as ObjectDetectionResult . To learn more about ObjectDetectionResult , 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult Source code in furiosa/models/vision/postprocess.py 31 32 33 34 35 36 37 38 39 @dataclass class LtrbBoundingBox : left : float top : float right : float bottom : float def __iter__ ( self ) -> List [ float ]: return iter ([ self . left , self . top , self . right , self . bottom ]) Source code in furiosa/models/vision/postprocess.py 88 89 90 91 92 93 @dataclass class ObjectDetectionResult : boundingbox : LtrbBoundingBox score : float label : str index : int Source code in furiosa/models/vision/yolov5/large.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def postprocess ( model_outputs : Sequence [ np . array ], context : Sequence [ Dict [ str , Any ]], conf_thres : float = 0.25 , iou_thres : float = 0.45 , ) -> List [ List [ ObjectDetectionResult ]]: \"\"\"Convert the outputs of this model to a list of bounding boxes, scores and labels Args: model_outputs (Sequence[np.array]): P3/8, P4/16, P5/32 features from yolov5l model. context (Dict[str, Any]): A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. conf_threshold (float, optional): Confidence score threshold. The default to 0.25 iou_thres (float, optional): IoU threshold value for the NMS processing. The default to 0.45. Returns: Detected Bounding Box and its score and label represented as `ObjectDetectionResult`. To learn more about `ObjectDetectionResult`, 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult: ::: furiosa.models.vision.postprocess.LtrbBoundingBox options: show_root_heading: false show_source: true ::: furiosa.models.vision.postprocess.ObjectDetectionResult options: show_root_heading: false show_source: true \"\"\" return _yolov5 . postprocess ( model_outputs , _BOX_DECODER , _get_anchor_per_layer_count (), _CLASS_NAMES , context , conf_thres = conf_thres , iou_thres = iou_thres , )","title":"furiosa.models.vision.yolov5.large.postprocess"},{"location":"models/yolov5m/","text":"YOLOv5m YOLOv5 is the one of the most popular object detection models developed by Ultralytics . You can find more details at https://github.com/ultralytics/yolov5. Overall Framework: PyTorch Model format: ONNX Model task: Object Detection Source: This model is originated from https://github.com/ultralytics/yolov5. Usage import cv2 from furiosa.models.vision import YOLOv5m from furiosa.models.vision.yolov5.medium import postprocess , preprocess from furiosa.runtime import session model = YOLOv5m . load () with session . create ( model ) as sess : image = cv2 . imread ( \"tests/assets/yolov5-test.jpg\" ) input , context = preprocess ([ image ], color_format = \"bgr\" ) output = sess . run ( input ) . numpy () postprocess ( output , context = context ) Model inputs The input is a 3-channel image of 640, 640 (height, width). Data Type: numpy.uint8 Tensor Shape: [1, 640, 640, 3] Memory Format: NCHW, where N - batch size C - number of channels H - image height W - image width Optimal Batch Size: 1 Outputs The outputs are 3 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 45, 80, 80) float32 NCHW 1 (1, 45, 40, 40) float32 NCHW 2 (1, 45, 20, 20) float32 NCHW Pre/Post processing furiosa.models.vision.yolov5.medium module provides a set of utilities to convert images to input tensors and the model outputs to object detection results. furiosa.models.vision.yolov5.medium.preprocess Preprocess a batch of images in numpy Parameters: Name Type Description Default images Sequence [ np . ndarray ] Color images have (NCHW: Batch, Channel, Height, Width) dimensions required color_format str 'rgb' (Red,Green,Blue) or 'bgr' (Blue,Green,Red) required Returns: Type Description Tuple [ np . ndarray , List [ Dict [ str , Any ]]] a pre-processed image, scales and padded sizes(width,height) per images. The first element is a preprocessing image, and a second element is a dictionary object to be used for postprocess. 'scale' key of the returned dict has a rescaled ratio per width(=target/width) and height(=target/height), and the 'pad' key has padded width and height pixels. Specially, the last dictionary element of returing tuple will be passed to postprocessing as a parameter to calculate predicted coordinates on normalized coordinates back to an input image coordinator. furiosa.models.vision.yolov5.medium.postprocess Convert the outputs of this model to a list of bounding boxes, scores and labels Parameters: Name Type Description Default model_outputs Sequence [ np . array ] P3/8, P4/16, P5/32 features from yolov5m model. required context Dict [ str , Any ] A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. required conf_threshold float Confidence score threshold. The default to 0.25 required iou_thres float IoU threshold value for the NMS processing. The default to 0.45. 0.45 Returns: Type Description List [ List [ ObjectDetectionResult ]] Detected Bounding Box and its score and label represented as ObjectDetectionResult . To learn more about ObjectDetectionResult , 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult Source code in furiosa/models/vision/postprocess.py 31 32 33 34 35 36 37 38 39 @dataclass class LtrbBoundingBox : left : float top : float right : float bottom : float def __iter__ ( self ) -> List [ float ]: return iter ([ self . left , self . top , self . right , self . bottom ]) Source code in furiosa/models/vision/postprocess.py 88 89 90 91 92 93 @dataclass class ObjectDetectionResult : boundingbox : LtrbBoundingBox score : float label : str index : int","title":"YOLOv5m"},{"location":"models/yolov5m/#yolov5m","text":"YOLOv5 is the one of the most popular object detection models developed by Ultralytics . You can find more details at https://github.com/ultralytics/yolov5.","title":"YOLOv5m"},{"location":"models/yolov5m/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Object Detection Source: This model is originated from https://github.com/ultralytics/yolov5. Usage import cv2 from furiosa.models.vision import YOLOv5m from furiosa.models.vision.yolov5.medium import postprocess , preprocess from furiosa.runtime import session model = YOLOv5m . load () with session . create ( model ) as sess : image = cv2 . imread ( \"tests/assets/yolov5-test.jpg\" ) input , context = preprocess ([ image ], color_format = \"bgr\" ) output = sess . run ( input ) . numpy () postprocess ( output , context = context )","title":"Overall"},{"location":"models/yolov5m/#model-inputs","text":"The input is a 3-channel image of 640, 640 (height, width). Data Type: numpy.uint8 Tensor Shape: [1, 640, 640, 3] Memory Format: NCHW, where N - batch size C - number of channels H - image height W - image width Optimal Batch Size: 1","title":"Model inputs"},{"location":"models/yolov5m/#outputs","text":"The outputs are 3 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 45, 80, 80) float32 NCHW 1 (1, 45, 40, 40) float32 NCHW 2 (1, 45, 20, 20) float32 NCHW","title":"Outputs"},{"location":"models/yolov5m/#prepost-processing","text":"furiosa.models.vision.yolov5.medium module provides a set of utilities to convert images to input tensors and the model outputs to object detection results.","title":"Pre/Post processing"},{"location":"models/yolov5m/#furiosamodelsvisionyolov5mediumpreprocess","text":"Preprocess a batch of images in numpy Parameters: Name Type Description Default images Sequence [ np . ndarray ] Color images have (NCHW: Batch, Channel, Height, Width) dimensions required color_format str 'rgb' (Red,Green,Blue) or 'bgr' (Blue,Green,Red) required Returns: Type Description Tuple [ np . ndarray , List [ Dict [ str , Any ]]] a pre-processed image, scales and padded sizes(width,height) per images. The first element is a preprocessing image, and a second element is a dictionary object to be used for postprocess. 'scale' key of the returned dict has a rescaled ratio per width(=target/width) and height(=target/height), and the 'pad' key has padded width and height pixels. Specially, the last dictionary element of returing tuple will be passed to postprocessing as a parameter to calculate predicted coordinates on normalized coordinates back to an input image coordinator.","title":"furiosa.models.vision.yolov5.medium.preprocess"},{"location":"models/yolov5m/#furiosamodelsvisionyolov5mediumpostprocess","text":"Convert the outputs of this model to a list of bounding boxes, scores and labels Parameters: Name Type Description Default model_outputs Sequence [ np . array ] P3/8, P4/16, P5/32 features from yolov5m model. required context Dict [ str , Any ] A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. required conf_threshold float Confidence score threshold. The default to 0.25 required iou_thres float IoU threshold value for the NMS processing. The default to 0.45. 0.45 Returns: Type Description List [ List [ ObjectDetectionResult ]] Detected Bounding Box and its score and label represented as ObjectDetectionResult . To learn more about ObjectDetectionResult , 'Definition of ObjectDetectionResult' can be found below. Definition of ObjectDetectionResult Source code in furiosa/models/vision/postprocess.py 31 32 33 34 35 36 37 38 39 @dataclass class LtrbBoundingBox : left : float top : float right : float bottom : float def __iter__ ( self ) -> List [ float ]: return iter ([ self . left , self . top , self . right , self . bottom ]) Source code in furiosa/models/vision/postprocess.py 88 89 90 91 92 93 @dataclass class ObjectDetectionResult : boundingbox : LtrbBoundingBox score : float label : str index : int","title":"furiosa.models.vision.yolov5.medium.postprocess"}]}