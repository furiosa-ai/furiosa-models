{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Furiosa Models furiosa-models is an open model zoo project for FuriosaAI NPU. It provides a set of public pre-trained, pre-quantized models for learning and demo purposes or for developing your applications. furisoa-models also includes pre-packaged post/processing utilities, compiler configurations optimized for FuriosaAI NPU. However, all models are standard ONNX or tflite models, and they can run even on CPU and GPU as well. https://github.com/furiosa-ai/furiosa-models Online Documentation If you are new, you can start from Getting Started . You can also find the latest online documents, including programming guide, API reference, examples from the followings: Furiosa Models - Documentation Model object and its Examples Model List Furiosa SDK - Tutorial and Code Examples Model List The table summarizes all models available in furiosa-models . If you visit each model link, you can find details about loading a model, their input and output tensors, and pre/post processings, and examples. Model Task Size Accuracy ResNet50 Image Classification 25M 76.002% SSDMobileNet Object Detection 7.2M mAP 0.228 SSDResNet34 Object Detection 20M mAP 0.220 YOLOv5M Object Detection 21M mAP 0.280 YOLOv5L Object Detection 46M mAP 0.295 See Also Furiosa Models - Documentation Furiosa Models - Github Furiosa SDK Documentation","title":"Overview"},{"location":"#furiosa-models","text":"furiosa-models is an open model zoo project for FuriosaAI NPU. It provides a set of public pre-trained, pre-quantized models for learning and demo purposes or for developing your applications. furisoa-models also includes pre-packaged post/processing utilities, compiler configurations optimized for FuriosaAI NPU. However, all models are standard ONNX or tflite models, and they can run even on CPU and GPU as well. https://github.com/furiosa-ai/furiosa-models","title":"Furiosa Models"},{"location":"#online-documentation","text":"If you are new, you can start from Getting Started . You can also find the latest online documents, including programming guide, API reference, examples from the followings: Furiosa Models - Documentation Model object and its Examples Model List Furiosa SDK - Tutorial and Code Examples","title":"Online Documentation"},{"location":"#model-list","text":"The table summarizes all models available in furiosa-models . If you visit each model link, you can find details about loading a model, their input and output tensors, and pre/post processings, and examples. Model Task Size Accuracy ResNet50 Image Classification 25M 76.002% SSDMobileNet Object Detection 7.2M mAP 0.228 SSDResNet34 Object Detection 20M mAP 0.220 YOLOv5M Object Detection 21M mAP 0.280 YOLOv5L Object Detection 46M mAP 0.295","title":"Model List"},{"location":"#see-also","text":"Furiosa Models - Documentation Furiosa Models - Github Furiosa SDK Documentation","title":"See Also"},{"location":"changelog/","text":"Changelog [0.8.0] New Features Add ResNet50 model Add SSD ResNet34 model Add SSD MobileNet model Add YOLOv5l model Add YOLOv5m model Improvements Add native postprocessing implementation for ResNet50 #42 Add native postprocessing implementation for SSD ResNet34 #45 Add native postprocessing implementation for SSD MobileNet #16 Refactor Model API to use classmethods to load models #66 Make Model Zoo's ABC Model #78 Retain only necessary python dependencies #81 Improve enf_generator.sh and add enf, dfg models for e2e tests #33 Add mkdocstrings to make API references #22 Tasks Regresstion Test #61 Attach Tekton CI #41 Yolov5 L/M e2e testing code #22 Change the documentation layout and add resnet34, resnet50, mobilenet details #33 Replace maturin with setuptools-rust #26 Bug Fixes Resolve DVC directly #80","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#080","text":"","title":"[0.8.0]"},{"location":"changelog/#new-features","text":"Add ResNet50 model Add SSD ResNet34 model Add SSD MobileNet model Add YOLOv5l model Add YOLOv5m model","title":"New Features"},{"location":"changelog/#improvements","text":"Add native postprocessing implementation for ResNet50 #42 Add native postprocessing implementation for SSD ResNet34 #45 Add native postprocessing implementation for SSD MobileNet #16 Refactor Model API to use classmethods to load models #66 Make Model Zoo's ABC Model #78 Retain only necessary python dependencies #81 Improve enf_generator.sh and add enf, dfg models for e2e tests #33 Add mkdocstrings to make API references #22","title":"Improvements"},{"location":"changelog/#tasks","text":"Regresstion Test #61 Attach Tekton CI #41 Yolov5 L/M e2e testing code #22 Change the documentation layout and add resnet34, resnet50, mobilenet details #33 Replace maturin with setuptools-rust #26","title":"Tasks"},{"location":"changelog/#bug-fixes","text":"Resolve DVC directly #80","title":"Bug Fixes"},{"location":"getting_started/","text":"Getting Started This documentation explains how to install furiosa-models, how to use available models in furisoa-models, and how to explore the documents. Prerequisites furiosa-models can be installed on various Linux distributions, but it has been tested on the followings: CentOS 7 or higher Debian buster or higher Ubuntu 18.04 or higher The following packages should be installed, but the followings are installed by default in most systems. So, only when you have any dependency issue, you need to install the following packages: libstdc++6 libgomp Installing You can quickly install Furiosa Models by using pip as following: pip install 'furiosa-models' Or you can build from the source code as following: git clone https://github.com/furiosa-ai/furiosa-models pip install . Quick example and Guides You can simply load a model and run through furiosa-sdk as following: from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) This example 1) fetches the SSDMobileNet model, 2) create a session , which is the main class of Furiosa Runtime which actually loads an ONNX/tflite model to NPU and run inferences, and 3) run an inference with pre/post processings. A Model instance is a Python object, including model artifacts and metadata. You can learn more about Model object at Model object . Each mode has its own pre/post processing steps. To learn about them, please refer to Pre/Post processing . Also, you can find all available models at Available Models . Each model page includes the model information, input and output tensors, and pre/post processings, and API reference. If you want to learn more about furiosa.runtime.session in Furiosa Runtime, please refer to Furiosa SDK - Tutorial and Code Examples .","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"This documentation explains how to install furiosa-models, how to use available models in furisoa-models, and how to explore the documents.","title":"Getting Started"},{"location":"getting_started/#prerequisites","text":"furiosa-models can be installed on various Linux distributions, but it has been tested on the followings: CentOS 7 or higher Debian buster or higher Ubuntu 18.04 or higher The following packages should be installed, but the followings are installed by default in most systems. So, only when you have any dependency issue, you need to install the following packages: libstdc++6 libgomp","title":"Prerequisites"},{"location":"getting_started/#installing","text":"You can quickly install Furiosa Models by using pip as following: pip install 'furiosa-models' Or you can build from the source code as following: git clone https://github.com/furiosa-ai/furiosa-models pip install .","title":"Installing"},{"location":"getting_started/#quick-example-and-guides","text":"You can simply load a model and run through furiosa-sdk as following: from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) This example 1) fetches the SSDMobileNet model, 2) create a session , which is the main class of Furiosa Runtime which actually loads an ONNX/tflite model to NPU and run inferences, and 3) run an inference with pre/post processings. A Model instance is a Python object, including model artifacts and metadata. You can learn more about Model object at Model object . Each mode has its own pre/post processing steps. To learn about them, please refer to Pre/Post processing . Also, you can find all available models at Available Models . Each model page includes the model information, input and output tensors, and pre/post processings, and API reference. If you want to learn more about furiosa.runtime.session in Furiosa Runtime, please refer to Furiosa SDK - Tutorial and Code Examples .","title":"Quick example and Guides"},{"location":"model_object/","text":"Model object In furiosa-models project, Model is the first class object, and it represents a neural network model. This document explains what Model object is, how you can access model artifacts and metadata, and usages. Loading a model To load a pre-trained neural-network model, you need to call as the following. Since the sizes of model images vary from tens to hundreds megabytes, fetching a pre-trained model takes some time (usually few seconds). So, we provide two versions of APIs, blocking API and non-blocking API. Non-blocking API will be useful if your application uses asynchronous executors. Blocking API Non-blocking API from furiosa.models.vision import ResNet50 from furiosa.registry import Model model : Model = ResNet50 . load () import asyncio from furiosa.models.vision import ResNet50 from furiosa.registry import Model model : Model = asyncio . run ( ResNet50 . load_async ()) Accessing artifacts and metadata A model object includes model artifacts, such as ONNX, tflite, DFG, and ENF. DFG and ENF are binary program formats generated by FuriosaAI Compiler . In addition, a model object has various metadata. The followings are all attributes belonging to a single Model object. furiosa.registry.Model Model for a Furiosa SDK. Source code in furiosa/registry/model.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class Model ( BaseModel ): \"\"\"Model for a Furiosa SDK.\"\"\" # class Config(BaseConfig): # # Non pydantic attribute allowed # # https://pydantic-docs.helpmanual.io/usage/types/#arbitrary-types-allowed # arbitrary_types_allowed = True name : str source : bytes = Field ( repr = False ) format : Format dfg : Optional [ bytes ] = Field ( repr = False ) enf : Optional [ bytes ] = Field ( repr = False ) family : Optional [ str ] = None version : Optional [ str ] = None metadata : Optional [ Metadata ] = None inputs : Optional [ List [ ModelTensor ]] = [] outputs : Optional [ List [ ModelTensor ]] = [] compiler_config : Optional [ Dict ] = None Creating a session (with a compilation) To load a model to FuriosaAI NPU, you need to create a session instance with a specific model artifact through Furiosa SDK. As we mentioned above, even a single model instance has multiple model artifacts from a ONNX model to a pre-compiled binary called ENF. By default, the session API uses the ENF (FuriosaAI's compiled program binary) of the Model instance to reduce the model compilation time. However, when you want to compile a model with a custom compiler configuration, you can compile from a ONNX or tflite model. As we mentioned at Accessing artifacts and metadata , Model.source field has an ONNX or tflite binary. The following codes show two example cases: Using ENF binary Using ONNX model from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model . source , batch_size = 2 ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" , \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) If you want to learn more about various options and features of Session API, please refer to Furiosa SDK - Tutorial and Code Examples . See Also Furiosa SDK Documentation","title":"Model object"},{"location":"model_object/#model-object","text":"In furiosa-models project, Model is the first class object, and it represents a neural network model. This document explains what Model object is, how you can access model artifacts and metadata, and usages.","title":"Model object"},{"location":"model_object/#loading-a-model","text":"To load a pre-trained neural-network model, you need to call as the following. Since the sizes of model images vary from tens to hundreds megabytes, fetching a pre-trained model takes some time (usually few seconds). So, we provide two versions of APIs, blocking API and non-blocking API. Non-blocking API will be useful if your application uses asynchronous executors. Blocking API Non-blocking API from furiosa.models.vision import ResNet50 from furiosa.registry import Model model : Model = ResNet50 . load () import asyncio from furiosa.models.vision import ResNet50 from furiosa.registry import Model model : Model = asyncio . run ( ResNet50 . load_async ())","title":"Loading a model"},{"location":"model_object/#accessing-artifacts-and-metadata","text":"A model object includes model artifacts, such as ONNX, tflite, DFG, and ENF. DFG and ENF are binary program formats generated by FuriosaAI Compiler . In addition, a model object has various metadata. The followings are all attributes belonging to a single Model object.","title":"Accessing artifacts and metadata"},{"location":"model_object/#furiosaregistrymodel","text":"Model for a Furiosa SDK. Source code in furiosa/registry/model.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class Model ( BaseModel ): \"\"\"Model for a Furiosa SDK.\"\"\" # class Config(BaseConfig): # # Non pydantic attribute allowed # # https://pydantic-docs.helpmanual.io/usage/types/#arbitrary-types-allowed # arbitrary_types_allowed = True name : str source : bytes = Field ( repr = False ) format : Format dfg : Optional [ bytes ] = Field ( repr = False ) enf : Optional [ bytes ] = Field ( repr = False ) family : Optional [ str ] = None version : Optional [ str ] = None metadata : Optional [ Metadata ] = None inputs : Optional [ List [ ModelTensor ]] = [] outputs : Optional [ List [ ModelTensor ]] = [] compiler_config : Optional [ Dict ] = None","title":"furiosa.registry.Model"},{"location":"model_object/#creating-a-session-with-a-compilation","text":"To load a model to FuriosaAI NPU, you need to create a session instance with a specific model artifact through Furiosa SDK. As we mentioned above, even a single model instance has multiple model artifacts from a ONNX model to a pre-compiled binary called ENF. By default, the session API uses the ENF (FuriosaAI's compiled program binary) of the Model instance to reduce the model compilation time. However, when you want to compile a model with a custom compiler configuration, you can compile from a ONNX or tflite model. As we mentioned at Accessing artifacts and metadata , Model.source field has an ONNX or tflite binary. The following codes show two example cases: Using ENF binary Using ONNX model from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model . source , batch_size = 2 ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" , \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) If you want to learn more about various options and features of Session API, please refer to Furiosa SDK - Tutorial and Code Examples .","title":"Creating a session (with a compilation)"},{"location":"model_object/#see-also","text":"Furiosa SDK Documentation","title":"See Also"},{"location":"native_postprocessor/","text":"Some models include the native post-processing implementations, optimized for FuriosaAI Warboy and Intel/AMD CPUs. Basically, furiosa-models includes pre/post-processing implementation in Python for each model. They are reference implementations and can work with CPU and other accelerators like GPU. The native post processor is implemented in Rust and C++, and works with only FuriosaAI NPU. The implementation is designed to leverage FuriosaAI NPU's characteristics even for post-processing and maximize the latency and throughput by using the characteristics of modern CPU architecture, such as CPU cache, SIMD instructions and CPU pipelining. Table 1. Models that support native-postprocessors and their benchmark Model Latency (Python) Latency (Native) ResNet50 SSDMobileNet SSDResNet34 Usage To use native post processor, please pass use_native_post=True when a model is initialized. After then, you need to initialize NativePostProcessor . To evaluate the postprocessing results, please call NativePostProcessor.eval() . The following is an example to use native post processor for SSDMobileNet . from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ])","title":"Native postprocessor"},{"location":"native_postprocessor/#usage","text":"To use native post processor, please pass use_native_post=True when a model is initialized. After then, you need to initialize NativePostProcessor . To evaluate the postprocessing results, please call NativePostProcessor.eval() . The following is an example to use native post processor for SSDMobileNet . from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ])","title":"Usage"},{"location":"models/resnet50_v1.5/","text":"ResNet50 v1.5 ResNet50 v1.5 backbone model trained on ImageNet (224x224). This model has been used since MLCommons v0.5. Overall Framework: PyTorch Model format: ONNX Model task: Image classification Source: This model is originated from ResNet50 v1.5 in ONNX available at MLCommons - Supported Models . Usages Default Native Postprocessor from furiosa.models.vision import ResNet50 , resnet50 from furiosa.runtime import session model = ResNet50 . load () with session . create ( model ) as sess : image = resnet50 . preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () resnet50 . postprocess ( output ) from furiosa.models.vision import ResNet50 from furiosa.models.vision.resnet50 import NativePostProcessor , preprocess from furiosa.runtime import session model = ResNet50 . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image = preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () postprocessor . eval ( output ) Inputs of Model The input is a 3-channel image of 224x224 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 224, 224] Memory Format: NCHW, where: N - batch size C - number of channels H - image height W - image width NPU Optimal Batch Size: <= 8 Output of Model The output is a numpy.float32 tensor with the shape ( [1,] ), including a class id. postprocess() can transform the class id to a single label. Pre/Post processing furiosa.models.vision.resnet50 module provides a set of utilities to convert images to input tensors and the model outputs to labels. furiosa.models.vision.resnet50.preprocess Read and preprocess an image located at image_path. Source code in furiosa/models/vision/resnet50/__init__.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def preprocess ( image : Union [ str , np . ndarray ]) -> np . array : \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/main.py#L37-L39 # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/dataset.py#L168-L184 if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) image = resize_with_aspect_ratio ( image , 224 , 224 , percent = 87.5 , interpolation = cv2 . INTER_AREA ) image = center_crop ( image , 224 , 224 ) image = np . asarray ( image , dtype = np . float32 ) # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/dataset.py#L178 image -= np . array ([ 123.68 , 116.78 , 103.94 ], dtype = np . float32 ) image = image . transpose ([ 2 , 0 , 1 ]) return image [ np . newaxis , ... ] furiosa.models.vision.resnet50.postprocess Source code in furiosa/models/vision/resnet50/__init__.py 64 65 def postprocess ( outputs : Sequence [ numpy . ndarray ]) -> str : return CLASSES [ int ( outputs [ 0 ]) - 1 ] furiosa.models.vision.resnet50.NativePostProcess","title":"ResNet50 v1.5"},{"location":"models/resnet50_v1.5/#resnet50-v15","text":"ResNet50 v1.5 backbone model trained on ImageNet (224x224). This model has been used since MLCommons v0.5.","title":"ResNet50 v1.5"},{"location":"models/resnet50_v1.5/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Image classification Source: This model is originated from ResNet50 v1.5 in ONNX available at MLCommons - Supported Models .","title":"Overall"},{"location":"models/resnet50_v1.5/#usages","text":"Default Native Postprocessor from furiosa.models.vision import ResNet50 , resnet50 from furiosa.runtime import session model = ResNet50 . load () with session . create ( model ) as sess : image = resnet50 . preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () resnet50 . postprocess ( output ) from furiosa.models.vision import ResNet50 from furiosa.models.vision.resnet50 import NativePostProcessor , preprocess from furiosa.runtime import session model = ResNet50 . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image = preprocess ( \"tests/assets/cat.jpg\" ) output = sess . run ( image ) . numpy () postprocessor . eval ( output )","title":"Usages"},{"location":"models/resnet50_v1.5/#inputs-of-model","text":"The input is a 3-channel image of 224x224 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 224, 224] Memory Format: NCHW, where: N - batch size C - number of channels H - image height W - image width NPU Optimal Batch Size: <= 8","title":"Inputs of Model"},{"location":"models/resnet50_v1.5/#output-of-model","text":"The output is a numpy.float32 tensor with the shape ( [1,] ), including a class id. postprocess() can transform the class id to a single label.","title":"Output of Model"},{"location":"models/resnet50_v1.5/#prepost-processing","text":"furiosa.models.vision.resnet50 module provides a set of utilities to convert images to input tensors and the model outputs to labels.","title":"Pre/Post processing"},{"location":"models/resnet50_v1.5/#furiosamodelsvisionresnet50preprocess","text":"Read and preprocess an image located at image_path. Source code in furiosa/models/vision/resnet50/__init__.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def preprocess ( image : Union [ str , np . ndarray ]) -> np . array : \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/main.py#L37-L39 # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/dataset.py#L168-L184 if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) image = resize_with_aspect_ratio ( image , 224 , 224 , percent = 87.5 , interpolation = cv2 . INTER_AREA ) image = center_crop ( image , 224 , 224 ) image = np . asarray ( image , dtype = np . float32 ) # https://github.com/mlcommons/inference/blob/af7f5a0b856402b9f461002cfcad116736a8f8af/vision/classification_and_detection/python/dataset.py#L178 image -= np . array ([ 123.68 , 116.78 , 103.94 ], dtype = np . float32 ) image = image . transpose ([ 2 , 0 , 1 ]) return image [ np . newaxis , ... ]","title":"furiosa.models.vision.resnet50.preprocess"},{"location":"models/resnet50_v1.5/#furiosamodelsvisionresnet50postprocess","text":"Source code in furiosa/models/vision/resnet50/__init__.py 64 65 def postprocess ( outputs : Sequence [ numpy . ndarray ]) -> str : return CLASSES [ int ( outputs [ 0 ]) - 1 ]","title":"furiosa.models.vision.resnet50.postprocess"},{"location":"models/resnet50_v1.5/#furiosamodelsvisionresnet50nativepostprocess","text":"","title":"furiosa.models.vision.resnet50.NativePostProcess"},{"location":"models/ssd_mobilenet/","text":"SSD MobileNet v1 SSD MobileNet v1 backbone model trained on COCO (300x300). This model has been used since MLCommons v0.5. Overall Framework: PyTorch Model format: ONNX Model task: Object detection Source: This model is originated from SSD MobileNet v1 in ONNX available at MLCommons - Supported Models . Usages Default Native Postprocessor from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ]) Inputs of Model The input is a 3-channel image of 300x300 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 300, 300] Memory Format: NCHW, where: N - batch size C - number of channels H - image height W - image width Optimal Batch Size: <= 8 Outputs of Model The outputs are 12 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 273, 19, 19) float32 NCHW 1 (1, 12, 19, 19) float32 NCHW 2 (1, 546, 10, 10) float32 NCHW 3 (1, 24, 10, 10) float32 NCHW 4 (1, 546, 5, 5) float32 NCHW 5 (1, 24, 5, 5) float32 NCHW 6 (1, 546, 3, 3) float32 NCHW 7 (1, 24, 3, 3) float32 NCHW 8 (1, 546, 2, 2) float32 NCHW 9 (1, 24, 2, 2) float32 NCHW 10 (1, 546, 1, 1) float32 NCHW 11 (1, 24, 1, 1) float32 NCHW Pre/Post processing furiosa.models.vision.ssd_mobilenet module provides a set of utilities to convert images to input tensors and the model outputs to labels. furiosa.models.vision.ssd_mobilenet.preprocess Read and preprocess an image located at image_path. Source code in furiosa/models/vision/ssd_mobilenet/__init__.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def preprocess ( image_path_list : Sequence [ Union [ str , np . ndarray ]] ) -> Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]]: \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L49-L51 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/dataset.py#L242-L249 batch_image = [] batch_preproc_param = [] for image in image_path_list : if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = np . array ( image , dtype = np . float32 ) if len ( image . shape ) < 3 or image . shape [ 2 ] != 3 : image = cv2 . cvtColor ( image , cv2 . COLOR_GRAY2RGB ) else : image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) width = image . shape [ 1 ] height = image . shape [ 0 ] image = cv2 . resize ( image , ( 300 , 300 ), interpolation = cv2 . INTER_LINEAR ) image -= 127.5 image /= 127.5 image = image . transpose ([ 2 , 0 , 1 ]) batch_image . append ( image ) batch_preproc_param . append ({ \"width\" : width , \"height\" : height }) return np . stack ( batch_image , axis = 0 ), batch_preproc_param furiosa.models.vision.ssd_mobilenet.postprocess Source code in furiosa/models/vision/ssd_mobilenet/__init__.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 def postprocess ( outputs : Sequence [ numpy . ndarray ], batch_preproc_params : Sequence [ Dict [ str , Any ]], confidence_threshold : float = 0.3 , iou_threshold : float = 0.6 , ) -> List [ List [ ObjectDetectionResult ]]: assert ( len ( outputs ) == NUM_OUTPUTS ), f \"the number of model outputs must be { NUM_OUTPUTS } , but { len ( outputs ) } \" batch_size = outputs [ 0 ] . shape [ 0 ] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L94-L97 class_logits = [ output . transpose (( 0 , 2 , 3 , 1 )) . reshape (( batch_size , - 1 , NUM_CLASSES )) for output in outputs [ 0 :: 2 ] ] box_regression = [ output . transpose (( 0 , 2 , 3 , 1 )) . reshape (( batch_size , - 1 , 4 )) for output in outputs [ 1 :: 2 ] ] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L144-L166 class_logits = np . concatenate ( class_logits , axis = 1 ) # type: ignore[assignment] box_regression = np . concatenate ( box_regression , axis = 1 ) # type: ignore[assignment] batch_scores = sigmoid ( class_logits ) # type: ignore[arg-type] batch_boxes = _decode_boxes ( box_regression ) # type: ignore[arg-type] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L178-L185 batch_results = [] for scores , boxes , preproc_params in zip ( batch_scores , batch_boxes , batch_preproc_params ): # loop mini-batch width , height = preproc_params [ \"width\" ], preproc_params [ \"height\" ] boxes , labels , scores = _filter_results ( scores , boxes , confidence_threshold = confidence_threshold , iou_threshold = iou_threshold , ) cal_boxes = calibration_ltrbbox ( boxes , width , height ) predicted_result = [] for b , l , s in zip ( cal_boxes , labels , scores ): bb_list = b . tolist () predicted_result . append ( ObjectDetectionResult ( index = l , label = CLASSES [ l ], score = s , boundingbox = LtrbBoundingBox ( left = bb_list [ 0 ], top = bb_list [ 1 ], right = bb_list [ 2 ], bottom = bb_list [ 3 ] ), ) ) batch_results . append ( predicted_result ) return batch_results furiosa.models.vision.ssd_mobilenet.NativePostProcess","title":"SSD MobileNet v1"},{"location":"models/ssd_mobilenet/#ssd-mobilenet-v1","text":"SSD MobileNet v1 backbone model trained on COCO (300x300). This model has been used since MLCommons v0.5.","title":"SSD MobileNet v1"},{"location":"models/ssd_mobilenet/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Object detection Source: This model is originated from SSD MobileNet v1 in ONNX available at MLCommons - Supported Models .","title":"Overall"},{"location":"models/ssd_mobilenet/#usages","text":"Default Native Postprocessor from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import postprocess , preprocess from furiosa.runtime import session model = SSDMobileNet . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDMobileNet from furiosa.models.vision.ssd_mobilenet import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDMobileNet . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context [ 0 ])","title":"Usages"},{"location":"models/ssd_mobilenet/#inputs-of-model","text":"The input is a 3-channel image of 300x300 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 300, 300] Memory Format: NCHW, where: N - batch size C - number of channels H - image height W - image width Optimal Batch Size: <= 8","title":"Inputs of Model"},{"location":"models/ssd_mobilenet/#outputs-of-model","text":"The outputs are 12 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 273, 19, 19) float32 NCHW 1 (1, 12, 19, 19) float32 NCHW 2 (1, 546, 10, 10) float32 NCHW 3 (1, 24, 10, 10) float32 NCHW 4 (1, 546, 5, 5) float32 NCHW 5 (1, 24, 5, 5) float32 NCHW 6 (1, 546, 3, 3) float32 NCHW 7 (1, 24, 3, 3) float32 NCHW 8 (1, 546, 2, 2) float32 NCHW 9 (1, 24, 2, 2) float32 NCHW 10 (1, 546, 1, 1) float32 NCHW 11 (1, 24, 1, 1) float32 NCHW","title":"Outputs of Model"},{"location":"models/ssd_mobilenet/#prepost-processing","text":"furiosa.models.vision.ssd_mobilenet module provides a set of utilities to convert images to input tensors and the model outputs to labels.","title":"Pre/Post processing"},{"location":"models/ssd_mobilenet/#furiosamodelsvisionssd_mobilenetpreprocess","text":"Read and preprocess an image located at image_path. Source code in furiosa/models/vision/ssd_mobilenet/__init__.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def preprocess ( image_path_list : Sequence [ Union [ str , np . ndarray ]] ) -> Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]]: \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L49-L51 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/dataset.py#L242-L249 batch_image = [] batch_preproc_param = [] for image in image_path_list : if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = np . array ( image , dtype = np . float32 ) if len ( image . shape ) < 3 or image . shape [ 2 ] != 3 : image = cv2 . cvtColor ( image , cv2 . COLOR_GRAY2RGB ) else : image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) width = image . shape [ 1 ] height = image . shape [ 0 ] image = cv2 . resize ( image , ( 300 , 300 ), interpolation = cv2 . INTER_LINEAR ) image -= 127.5 image /= 127.5 image = image . transpose ([ 2 , 0 , 1 ]) batch_image . append ( image ) batch_preproc_param . append ({ \"width\" : width , \"height\" : height }) return np . stack ( batch_image , axis = 0 ), batch_preproc_param","title":"furiosa.models.vision.ssd_mobilenet.preprocess"},{"location":"models/ssd_mobilenet/#furiosamodelsvisionssd_mobilenetpostprocess","text":"Source code in furiosa/models/vision/ssd_mobilenet/__init__.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 def postprocess ( outputs : Sequence [ numpy . ndarray ], batch_preproc_params : Sequence [ Dict [ str , Any ]], confidence_threshold : float = 0.3 , iou_threshold : float = 0.6 , ) -> List [ List [ ObjectDetectionResult ]]: assert ( len ( outputs ) == NUM_OUTPUTS ), f \"the number of model outputs must be { NUM_OUTPUTS } , but { len ( outputs ) } \" batch_size = outputs [ 0 ] . shape [ 0 ] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L94-L97 class_logits = [ output . transpose (( 0 , 2 , 3 , 1 )) . reshape (( batch_size , - 1 , NUM_CLASSES )) for output in outputs [ 0 :: 2 ] ] box_regression = [ output . transpose (( 0 , 2 , 3 , 1 )) . reshape (( batch_size , - 1 , 4 )) for output in outputs [ 1 :: 2 ] ] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L144-L166 class_logits = np . concatenate ( class_logits , axis = 1 ) # type: ignore[assignment] box_regression = np . concatenate ( box_regression , axis = 1 ) # type: ignore[assignment] batch_scores = sigmoid ( class_logits ) # type: ignore[arg-type] batch_boxes = _decode_boxes ( box_regression ) # type: ignore[arg-type] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py#L178-L185 batch_results = [] for scores , boxes , preproc_params in zip ( batch_scores , batch_boxes , batch_preproc_params ): # loop mini-batch width , height = preproc_params [ \"width\" ], preproc_params [ \"height\" ] boxes , labels , scores = _filter_results ( scores , boxes , confidence_threshold = confidence_threshold , iou_threshold = iou_threshold , ) cal_boxes = calibration_ltrbbox ( boxes , width , height ) predicted_result = [] for b , l , s in zip ( cal_boxes , labels , scores ): bb_list = b . tolist () predicted_result . append ( ObjectDetectionResult ( index = l , label = CLASSES [ l ], score = s , boundingbox = LtrbBoundingBox ( left = bb_list [ 0 ], top = bb_list [ 1 ], right = bb_list [ 2 ], bottom = bb_list [ 3 ] ), ) ) batch_results . append ( predicted_result ) return batch_results","title":"furiosa.models.vision.ssd_mobilenet.postprocess"},{"location":"models/ssd_mobilenet/#furiosamodelsvisionssd_mobilenetnativepostprocess","text":"","title":"furiosa.models.vision.ssd_mobilenet.NativePostProcess"},{"location":"models/ssd_resnet34/","text":"SSD ResNet34 SSD ResNet34 backbone model trained on COCO (1200x1200). This model has been used since MLCommons v0.5. Overall Framework: PyTorch Model format: ONNX Model task: Object detection Source: This model is originated from SSD ResNet34 in ONNX available at MLCommons - Supported Models . Usages Default Native Postprocessor from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import postprocess , preprocess from furiosa.runtime import session model = SSDResNet34 . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDResNet34 . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context ) Model inputs The input is a 3-channel image of 300x300 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 1200, 1200] Memory Format: NCHW, where N - batch size C - number of channels H - image height W - image width Optimal Batch Size: 1 Outputs The outputs are 12 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 324, 50, 50) float32 NCHW 1 (1, 486, 25, 25) float32 NCHW 2 (1, 486, 13, 13) float32 NCHW 3 (1, 486, 7, 7) float32 NCHW 4 (1, 324, 3, 3) float32 NCHW 5 (1, 324, 3, 3) float32 NCHW 6 (1, 16, 50, 50) float32 NCHW 7 (1, 24, 25, 25) float32 NCHW 8 (1, 24, 13, 13) float32 NCHW 9 (1, 24, 7, 7) float32 NCHW 10 (1, 16, 3, 3) float32 NCHW 11 (1, 16, 3, 3) float32 NCHW Pre/Post processing furiosa.models.vision.ssd_resnet34 module provides a set of utilities to convert images to input tensors and the model outputs to labels. furiosa.models.vision.ssd_resnet34.preprocess Read and preprocess an image located at image_path. Source code in furiosa/models/vision/ssd_resnet34/__init__.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def preprocess ( image_path_list : List [ Union [ str , np . ndarray ]] ) -> Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]]: \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L141 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L61-L63 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/dataset.py#L252-L263 batch_image = [] batch_preproc_param = [] for image in image_path_list : if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = np . array ( image , dtype = np . float32 ) if len ( image . shape ) < 3 or image . shape [ 2 ] != 3 : image = cv2 . cvtColor ( image , cv2 . COLOR_GRAY2RGB ) else : image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) width = image . shape [ 1 ] height = image . shape [ 0 ] image = cv2 . resize ( image , ( 1200 , 1200 ), interpolation = cv2 . INTER_LINEAR ) mean = np . array ([ 0.485 , 0.456 , 0.406 ], dtype = np . float32 ) std = np . array ([ 0.229 , 0.224 , 0.225 ], dtype = np . float32 ) image = image / 255.0 - mean image = image / std # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L143 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/coco.py#L40 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/coco.py#L91 image = image . transpose ([ 2 , 0 , 1 ]) batch_image . append ( image ) batch_preproc_param . append ({ \"width\" : width , \"height\" : height }) return np . stack ( batch_image , axis = 0 ), batch_preproc_param furiosa.models.vision.ssd_resnet34.postprocess Source code in furiosa/models/vision/ssd_resnet34/__init__.py 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 def postprocess ( outputs : Sequence [ np . ndarray ], batch_preproc_params : Sequence [ Dict [ str , Any ]], confidence_threshold = 0.05 , ) -> List [ List [ ObjectDetectionResult ]]: if len ( outputs ) != NUM_OUTPUTS : raise Exception ( f \"output size must be { NUM_OUTPUTS } , but { len ( outputs ) } \" ) classes , locations = outputs [: 6 ], outputs [ 6 :] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L317-L329 classes = [ np . reshape ( cls , ( cls . shape [ 0 ], 81 , - 1 )) for cls in classes ] locations = [ np . reshape ( loc , ( loc . shape [ 0 ], 4 , - 1 )) for loc in locations ] classes = np . concatenate ( classes , axis = 2 ) locations = np . concatenate ( locations , axis = 2 ) # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L251-L253 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L350 # len(det_boxes: List[np.array]) = N batch det_boxes , det_labels , det_scores = Encoder ( dboxes_R34_coco (( 1200 , 1200 ), ( 3 , 3 , 2 , 2 , 2 , 2 )) ) . decode_batch ( torch . from_numpy ( locations ), torch . from_numpy ( classes ), 0.50 , 200 ) # Pick the best boxes # https://pytorch.org/hub/nvidia_deeplearningexamples_ssd/ # sometimes there are many boxes with localizaition and class probability distrituion. batch_results = [] for boxes , labels , scores , preproc_params in zip ( det_boxes , det_labels , det_scores , batch_preproc_params ): width , height = preproc_params [ 'width' ], preproc_params [ 'height' ] boxes , labels , scores = _pick_best ( detections = ( boxes , labels , scores ), confidence_threshold = confidence_threshold , ) cal_boxes = calibration_ltrbbox ( boxes , width , height ) predicted_result = [] for b , l , s in zip ( cal_boxes , labels , scores ): bb_list = b . tolist () predicted_result . append ( ObjectDetectionResult ( index = int ( l ), label = CLASSES [ l ], score = s , boundingbox = LtrbBoundingBox ( left = bb_list [ 0 ], top = bb_list [ 1 ], right = bb_list [ 2 ], bottom = bb_list [ 3 ] ), ) ) batch_results . append ( predicted_result ) return batch_results furiosa.models.vision.ssd_resnet34.NativePostProcess","title":"SSD ResNet34"},{"location":"models/ssd_resnet34/#ssd-resnet34","text":"SSD ResNet34 backbone model trained on COCO (1200x1200). This model has been used since MLCommons v0.5.","title":"SSD ResNet34"},{"location":"models/ssd_resnet34/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Object detection Source: This model is originated from SSD ResNet34 in ONNX available at MLCommons - Supported Models .","title":"Overall"},{"location":"models/ssd_resnet34/#usages","text":"Default Native Postprocessor from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import postprocess , preprocess from furiosa.runtime import session model = SSDResNet34 . load () with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocess ( output , context = context ) from furiosa.models.vision import SSDResNet34 from furiosa.models.vision.ssd_resnet34 import NativePostProcessor , preprocess from furiosa.runtime import session model = SSDResNet34 . load ( use_native_post = True ) postprocessor = NativePostProcessor ( model ) with session . create ( model ) as sess : image , context = preprocess ([ \"tests/assets/cat.jpg\" ]) output = sess . run ( image ) . numpy () postprocessor . eval ( output , context = context )","title":"Usages"},{"location":"models/ssd_resnet34/#model-inputs","text":"The input is a 3-channel image of 300x300 (height, width). Data Type: numpy.float32 Tensor Shape: [1, 3, 1200, 1200] Memory Format: NCHW, where N - batch size C - number of channels H - image height W - image width Optimal Batch Size: 1","title":"Model inputs"},{"location":"models/ssd_resnet34/#outputs","text":"The outputs are 12 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 324, 50, 50) float32 NCHW 1 (1, 486, 25, 25) float32 NCHW 2 (1, 486, 13, 13) float32 NCHW 3 (1, 486, 7, 7) float32 NCHW 4 (1, 324, 3, 3) float32 NCHW 5 (1, 324, 3, 3) float32 NCHW 6 (1, 16, 50, 50) float32 NCHW 7 (1, 24, 25, 25) float32 NCHW 8 (1, 24, 13, 13) float32 NCHW 9 (1, 24, 7, 7) float32 NCHW 10 (1, 16, 3, 3) float32 NCHW 11 (1, 16, 3, 3) float32 NCHW","title":"Outputs"},{"location":"models/ssd_resnet34/#prepost-processing","text":"furiosa.models.vision.ssd_resnet34 module provides a set of utilities to convert images to input tensors and the model outputs to labels.","title":"Pre/Post processing"},{"location":"models/ssd_resnet34/#furiosamodelsvisionssd_resnet34preprocess","text":"Read and preprocess an image located at image_path. Source code in furiosa/models/vision/ssd_resnet34/__init__.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def preprocess ( image_path_list : List [ Union [ str , np . ndarray ]] ) -> Tuple [ npt . ArrayLike , List [ Dict [ str , Any ]]]: \"\"\"Read and preprocess an image located at image_path.\"\"\" # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L141 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L61-L63 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/dataset.py#L252-L263 batch_image = [] batch_preproc_param = [] for image in image_path_list : if type ( image ) == str : image = cv2 . imread ( image ) if image is None : raise FileNotFoundError ( image ) image = np . array ( image , dtype = np . float32 ) if len ( image . shape ) < 3 or image . shape [ 2 ] != 3 : image = cv2 . cvtColor ( image , cv2 . COLOR_GRAY2RGB ) else : image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) width = image . shape [ 1 ] height = image . shape [ 0 ] image = cv2 . resize ( image , ( 1200 , 1200 ), interpolation = cv2 . INTER_LINEAR ) mean = np . array ([ 0.485 , 0.456 , 0.406 ], dtype = np . float32 ) std = np . array ([ 0.229 , 0.224 , 0.225 ], dtype = np . float32 ) image = image / 255.0 - mean image = image / std # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/main.py#L143 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/coco.py#L40 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/coco.py#L91 image = image . transpose ([ 2 , 0 , 1 ]) batch_image . append ( image ) batch_preproc_param . append ({ \"width\" : width , \"height\" : height }) return np . stack ( batch_image , axis = 0 ), batch_preproc_param","title":"furiosa.models.vision.ssd_resnet34.preprocess"},{"location":"models/ssd_resnet34/#furiosamodelsvisionssd_resnet34postprocess","text":"Source code in furiosa/models/vision/ssd_resnet34/__init__.py 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 def postprocess ( outputs : Sequence [ np . ndarray ], batch_preproc_params : Sequence [ Dict [ str , Any ]], confidence_threshold = 0.05 , ) -> List [ List [ ObjectDetectionResult ]]: if len ( outputs ) != NUM_OUTPUTS : raise Exception ( f \"output size must be { NUM_OUTPUTS } , but { len ( outputs ) } \" ) classes , locations = outputs [: 6 ], outputs [ 6 :] # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L317-L329 classes = [ np . reshape ( cls , ( cls . shape [ 0 ], 81 , - 1 )) for cls in classes ] locations = [ np . reshape ( loc , ( loc . shape [ 0 ], 4 , - 1 )) for loc in locations ] classes = np . concatenate ( classes , axis = 2 ) locations = np . concatenate ( locations , axis = 2 ) # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L251-L253 # https://github.com/mlcommons/inference/blob/de6497f9d64b85668f2ab9c26c9e3889a7be257b/vision/classification_and_detection/python/models/ssd_r34.py#L350 # len(det_boxes: List[np.array]) = N batch det_boxes , det_labels , det_scores = Encoder ( dboxes_R34_coco (( 1200 , 1200 ), ( 3 , 3 , 2 , 2 , 2 , 2 )) ) . decode_batch ( torch . from_numpy ( locations ), torch . from_numpy ( classes ), 0.50 , 200 ) # Pick the best boxes # https://pytorch.org/hub/nvidia_deeplearningexamples_ssd/ # sometimes there are many boxes with localizaition and class probability distrituion. batch_results = [] for boxes , labels , scores , preproc_params in zip ( det_boxes , det_labels , det_scores , batch_preproc_params ): width , height = preproc_params [ 'width' ], preproc_params [ 'height' ] boxes , labels , scores = _pick_best ( detections = ( boxes , labels , scores ), confidence_threshold = confidence_threshold , ) cal_boxes = calibration_ltrbbox ( boxes , width , height ) predicted_result = [] for b , l , s in zip ( cal_boxes , labels , scores ): bb_list = b . tolist () predicted_result . append ( ObjectDetectionResult ( index = int ( l ), label = CLASSES [ l ], score = s , boundingbox = LtrbBoundingBox ( left = bb_list [ 0 ], top = bb_list [ 1 ], right = bb_list [ 2 ], bottom = bb_list [ 3 ] ), ) ) batch_results . append ( predicted_result ) return batch_results","title":"furiosa.models.vision.ssd_resnet34.postprocess"},{"location":"models/ssd_resnet34/#furiosamodelsvisionssd_resnet34nativepostprocess","text":"","title":"furiosa.models.vision.ssd_resnet34.NativePostProcess"},{"location":"models/yolov5l/","text":"YOLOv5L YOLOv5 is the one of the most popular object detection models developed by Ultralytics . You can find more details at https://github.com/ultralytics/yolov5. Overall Framework: PyTorch Model format: ONNX Model task: Object Detection Source: This model is originated from https://github.com/ultralytics/yolov5 Usage import cv2 import numpy as np from furiosa.models.vision import YOLOv5l from furiosa.models.vision.yolov5.medium import postprocess , preprocess from furiosa.runtime import session model = YOLOv5l . load () with session . create ( model ) as sess : image = cv2 . imread ( \"tests/assets/yolov5-test.jpg\" ) inputs , context = preprocess ([ image ], color_format = \"bgr\" ) output = sess . run ( np . expand_dims ( inputs [ 0 ], axis = 0 )) . numpy () postprocess ( output , context = context ) Model inputs The input is a 3-channel image of 640, 640 (height, width). Data Type: numpy.uint8 Tensor Shape: [1, 640, 640, 3] Memory Format: NHWC, where N - batch size H - image height W - image width C - number of channels Optimal Batch Size: 1 Outputs The outputs are 3 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 45, 80, 80) float32 NCHW 1 (1, 45, 40, 40) float32 NCHW 2 (1, 45, 20, 20) float32 NCHW Pre/Post processing furiosa.models.vision.yolov5.large module provides a set of utilities to convert images to input tensors and the model outputs to object detection results. furiosa.models.vision.yolov5.large.preprocess furiosa.models.vision.yolov5.large.postprocess Yolov5l Postprocess. Parameters: Name Type Description Default batch_feats Sequence [ np . array ] P3/8, P4/16, P5/32 features from yolov5l model. required batch_preproc_param Dict [ str , Any ] A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. required conf_threshold float Confidence score threshold. The default to 0.25 required iou_thres float IoU threshold value for the NMS processing. The default to 0.45. 0.45 Returns: Type Description List [ List [ _yolov5 . ObjectDetectionResult ]] yolov5.ObjectDetectionResult: Detected Bounding Box and its score and label by Yolov5l. Source code in furiosa/models/vision/yolov5/large.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def postprocess ( batch_feats : Sequence [ np . array ], batch_preproc_param : Sequence [ Dict [ str , Any ]], conf_thres : float = 0.25 , iou_thres : float = 0.45 , ) -> List [ List [ _yolov5 . ObjectDetectionResult ]]: \"\"\"Yolov5l Postprocess. Args: batch_feats (Sequence[np.array]): P3/8, P4/16, P5/32 features from yolov5l model. batch_preproc_param (Dict[str, Any]): A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. conf_threshold (float, optional): Confidence score threshold. The default to 0.25 iou_thres (float, optional): IoU threshold value for the NMS processing. The default to 0.45. Returns: yolov5.ObjectDetectionResult: Detected Bounding Box and its score and label by Yolov5l. \"\"\" return _yolov5 . postprocess ( batch_feats , _BOX_DECODER , get_anchor_per_layer_count (), _CLASS_NAMES , batch_preproc_param , conf_thres = conf_thres , iou_thres = iou_thres , )","title":"YOLOv5L"},{"location":"models/yolov5l/#yolov5l","text":"YOLOv5 is the one of the most popular object detection models developed by Ultralytics . You can find more details at https://github.com/ultralytics/yolov5.","title":"YOLOv5L"},{"location":"models/yolov5l/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Object Detection Source: This model is originated from https://github.com/ultralytics/yolov5 Usage import cv2 import numpy as np from furiosa.models.vision import YOLOv5l from furiosa.models.vision.yolov5.medium import postprocess , preprocess from furiosa.runtime import session model = YOLOv5l . load () with session . create ( model ) as sess : image = cv2 . imread ( \"tests/assets/yolov5-test.jpg\" ) inputs , context = preprocess ([ image ], color_format = \"bgr\" ) output = sess . run ( np . expand_dims ( inputs [ 0 ], axis = 0 )) . numpy () postprocess ( output , context = context )","title":"Overall"},{"location":"models/yolov5l/#model-inputs","text":"The input is a 3-channel image of 640, 640 (height, width). Data Type: numpy.uint8 Tensor Shape: [1, 640, 640, 3] Memory Format: NHWC, where N - batch size H - image height W - image width C - number of channels Optimal Batch Size: 1","title":"Model inputs"},{"location":"models/yolov5l/#outputs","text":"The outputs are 3 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 45, 80, 80) float32 NCHW 1 (1, 45, 40, 40) float32 NCHW 2 (1, 45, 20, 20) float32 NCHW","title":"Outputs"},{"location":"models/yolov5l/#prepost-processing","text":"furiosa.models.vision.yolov5.large module provides a set of utilities to convert images to input tensors and the model outputs to object detection results.","title":"Pre/Post processing"},{"location":"models/yolov5l/#furiosamodelsvisionyolov5largepreprocess","text":"","title":"furiosa.models.vision.yolov5.large.preprocess"},{"location":"models/yolov5l/#furiosamodelsvisionyolov5largepostprocess","text":"Yolov5l Postprocess. Parameters: Name Type Description Default batch_feats Sequence [ np . array ] P3/8, P4/16, P5/32 features from yolov5l model. required batch_preproc_param Dict [ str , Any ] A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. required conf_threshold float Confidence score threshold. The default to 0.25 required iou_thres float IoU threshold value for the NMS processing. The default to 0.45. 0.45 Returns: Type Description List [ List [ _yolov5 . ObjectDetectionResult ]] yolov5.ObjectDetectionResult: Detected Bounding Box and its score and label by Yolov5l. Source code in furiosa/models/vision/yolov5/large.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def postprocess ( batch_feats : Sequence [ np . array ], batch_preproc_param : Sequence [ Dict [ str , Any ]], conf_thres : float = 0.25 , iou_thres : float = 0.45 , ) -> List [ List [ _yolov5 . ObjectDetectionResult ]]: \"\"\"Yolov5l Postprocess. Args: batch_feats (Sequence[np.array]): P3/8, P4/16, P5/32 features from yolov5l model. batch_preproc_param (Dict[str, Any]): A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. conf_threshold (float, optional): Confidence score threshold. The default to 0.25 iou_thres (float, optional): IoU threshold value for the NMS processing. The default to 0.45. Returns: yolov5.ObjectDetectionResult: Detected Bounding Box and its score and label by Yolov5l. \"\"\" return _yolov5 . postprocess ( batch_feats , _BOX_DECODER , get_anchor_per_layer_count (), _CLASS_NAMES , batch_preproc_param , conf_thres = conf_thres , iou_thres = iou_thres , )","title":"furiosa.models.vision.yolov5.large.postprocess"},{"location":"models/yolov5m/","text":"YOLOv5m YOLOv5 is the one of the most popular object detection models developed by Ultralytics . You can find more details at https://github.com/ultralytics/yolov5. Overall Framework: PyTorch Model format: ONNX Model task: Object Detection Source: This model is originated from https://github.com/ultralytics/yolov5. Usage import cv2 import numpy as np from furiosa.models.vision import YOLOv5m from furiosa.models.vision.yolov5.medium import postprocess , preprocess from furiosa.runtime import session model = YOLOv5m . load () with session . create ( model ) as sess : image = cv2 . imread ( \"tests/assets/yolov5-test.jpg\" ) inputs , context = preprocess ([ image ], color_format = \"bgr\" ) output = sess . run ( np . expand_dims ( inputs [ 0 ], axis = 0 )) . numpy () postprocess ( output , context = context ) Model inputs The input is a 3-channel image of 640, 640 (height, width). Data Type: numpy.uint8 Tensor Shape: [1, 640, 640, 3] Memory Format: NHWC, where N - batch size H - image height W - image width C - number of channels Optimal Batch Size: 1 Outputs The outputs are 3 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 45, 80, 80) float32 NCHW 1 (1, 45, 40, 40) float32 NCHW 2 (1, 45, 20, 20) float32 NCHW Pre/Post processing furiosa.models.vision.yolov5.medium module provides a set of utilities to convert images to input tensors and the model outputs to object detection results. furiosa.models.vision.yolov5.medium.preprocess furiosa.models.vision.yolov5.medium.postprocess Yolov5m Postprocess. Parameters: Name Type Description Default batch_feats Sequence [ np . array ] P3/8, P4/16, P5/32 features from yolov5m model. required batch_preproc_param Dict [ str , Any ] A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. required conf_threshold float Confidence score threshold. The default to 0.25 required iou_thres float IoU threshold value for the NMS processing. The default to 0.45. 0.45 Returns: Type Description List [ List [ _yolov5 . ObjectDetectionResult ]] yolov5.ObjectDetectionResult: Detected Bounding Box and its score and label by Yolov5m.","title":"YOLOv5m"},{"location":"models/yolov5m/#yolov5m","text":"YOLOv5 is the one of the most popular object detection models developed by Ultralytics . You can find more details at https://github.com/ultralytics/yolov5.","title":"YOLOv5m"},{"location":"models/yolov5m/#overall","text":"Framework: PyTorch Model format: ONNX Model task: Object Detection Source: This model is originated from https://github.com/ultralytics/yolov5. Usage import cv2 import numpy as np from furiosa.models.vision import YOLOv5m from furiosa.models.vision.yolov5.medium import postprocess , preprocess from furiosa.runtime import session model = YOLOv5m . load () with session . create ( model ) as sess : image = cv2 . imread ( \"tests/assets/yolov5-test.jpg\" ) inputs , context = preprocess ([ image ], color_format = \"bgr\" ) output = sess . run ( np . expand_dims ( inputs [ 0 ], axis = 0 )) . numpy () postprocess ( output , context = context )","title":"Overall"},{"location":"models/yolov5m/#model-inputs","text":"The input is a 3-channel image of 640, 640 (height, width). Data Type: numpy.uint8 Tensor Shape: [1, 640, 640, 3] Memory Format: NHWC, where N - batch size H - image height W - image width C - number of channels Optimal Batch Size: 1","title":"Model inputs"},{"location":"models/yolov5m/#outputs","text":"The outputs are 3 numpy.float32 tensors in various shapes as the following. You can refer to postprocess() function to learn how to decode boxes, classes, and confidence scores. Tensor Shape Data Type Data Type Description 0 (1, 45, 80, 80) float32 NCHW 1 (1, 45, 40, 40) float32 NCHW 2 (1, 45, 20, 20) float32 NCHW","title":"Outputs"},{"location":"models/yolov5m/#prepost-processing","text":"furiosa.models.vision.yolov5.medium module provides a set of utilities to convert images to input tensors and the model outputs to object detection results.","title":"Pre/Post processing"},{"location":"models/yolov5m/#furiosamodelsvisionyolov5mediumpreprocess","text":"","title":"furiosa.models.vision.yolov5.medium.preprocess"},{"location":"models/yolov5m/#furiosamodelsvisionyolov5mediumpostprocess","text":"Yolov5m Postprocess. Parameters: Name Type Description Default batch_feats Sequence [ np . array ] P3/8, P4/16, P5/32 features from yolov5m model. required batch_preproc_param Dict [ str , Any ] A configuration for each image generated by the preprocessor. For example, it could be the reduction ratio of the image, the actual image width and height. required conf_threshold float Confidence score threshold. The default to 0.25 required iou_thres float IoU threshold value for the NMS processing. The default to 0.45. 0.45 Returns: Type Description List [ List [ _yolov5 . ObjectDetectionResult ]] yolov5.ObjectDetectionResult: Detected Bounding Box and its score and label by Yolov5m.","title":"furiosa.models.vision.yolov5.medium.postprocess"}]}